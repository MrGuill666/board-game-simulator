/*
 * generated by Xtext
 */
package hu.bme.aut.gergelyszaz.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import hu.bme.aut.gergelyszaz.services.BGLGrammarAccess;

public class BGLParser extends AbstractContentAssistParser {
	
	@Inject
	private BGLGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected hu.bme.aut.gergelyszaz.ui.contentassist.antlr.internal.InternalBGLParser createParser() {
		hu.bme.aut.gergelyszaz.ui.contentassist.antlr.internal.InternalBGLParser result = new hu.bme.aut.gergelyszaz.ui.contentassist.antlr.internal.InternalBGLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getActionAccess().getAlternatives(), "rule__Action__Alternatives");
					put(grammarAccess.getActionAccess().getObjectOfSelectAlternatives_2_1_0(), "rule__Action__ObjectOfSelectAlternatives_2_1_0");
					put(grammarAccess.getBooleanExpAccess().getAlternatives(), "rule__BooleanExp__Alternatives");
					put(grammarAccess.getBooleanExpAccess().getOperatorAlternatives_0_1_0(), "rule__BooleanExp__OperatorAlternatives_0_1_0");
					put(grammarAccess.getAttributeNameAccess().getAlternatives(), "rule__AttributeName__Alternatives");
					put(grammarAccess.getAttributeOrIntAccess().getAlternatives(), "rule__AttributeOrInt__Alternatives");
					put(grammarAccess.getAddtionExpAccess().getAlternatives_1(), "rule__AddtionExp__Alternatives_1");
					put(grammarAccess.getMultiplicationExpAccess().getAlternatives(), "rule__MultiplicationExp__Alternatives");
					put(grammarAccess.getMultiplicationExpAccess().getAlternatives_0_1(), "rule__MultiplicationExp__Alternatives_0_1");
					put(grammarAccess.getModelAccess().getGroup_0(), "rule__Model__Group_0__0");
					put(grammarAccess.getPlayerAccess().getGroup(), "rule__Player__Group__0");
					put(grammarAccess.getBoardAccess().getGroup_0(), "rule__Board__Group_0__0");
					put(grammarAccess.getRulesAccess().getGroup(), "rule__Rules__Group__0");
					put(grammarAccess.getTurnRulesAccess().getGroup(), "rule__TurnRules__Group__0");
					put(grammarAccess.getTokenAccess().getGroup(), "rule__Token__Group__0");
					put(grammarAccess.getFieldAccess().getGroup(), "rule__Field__Group__0");
					put(grammarAccess.getActionAccess().getGroup_0(), "rule__Action__Group_0__0");
					put(grammarAccess.getActionAccess().getGroup_2(), "rule__Action__Group_2__0");
					put(grammarAccess.getOrExpAccess().getGroup(), "rule__OrExp__Group__0");
					put(grammarAccess.getOrExpAccess().getGroup_1(), "rule__OrExp__Group_1__0");
					put(grammarAccess.getAndExpAccess().getGroup(), "rule__AndExp__Group__0");
					put(grammarAccess.getAndExpAccess().getGroup_1(), "rule__AndExp__Group_1__0");
					put(grammarAccess.getBooleanExpAccess().getGroup_0(), "rule__BooleanExp__Group_0__0");
					put(grammarAccess.getBooleanExpAccess().getGroup_1(), "rule__BooleanExp__Group_1__0");
					put(grammarAccess.getAttributeNameAccess().getGroup_1(), "rule__AttributeName__Group_1__0");
					put(grammarAccess.getAddtionExpAccess().getGroup(), "rule__AddtionExp__Group__0");
					put(grammarAccess.getAddtionExpAccess().getGroup_1_1(), "rule__AddtionExp__Group_1_1__0");
					put(grammarAccess.getMultiplicationExpAccess().getGroup_0(), "rule__MultiplicationExp__Group_0__0");
					put(grammarAccess.getMultiplicationExpAccess().getGroup_0_1_1(), "rule__MultiplicationExp__Group_0_1_1__0");
					put(grammarAccess.getMultiplicationExpAccess().getGroup_1(), "rule__MultiplicationExp__Group_1__0");
					put(grammarAccess.getValueAssignmentAccess().getGroup(), "rule__ValueAssignment__Group__0");
					put(grammarAccess.getModelAccess().getNameAssignment_0_1(), "rule__Model__NameAssignment_0_1");
					put(grammarAccess.getModelAccess().getPlayerAssignment_0_2(), "rule__Model__PlayerAssignment_0_2");
					put(grammarAccess.getModelAccess().getBoardAssignment_1(), "rule__Model__BoardAssignment_1");
					put(grammarAccess.getModelAccess().getTokensAssignment_2(), "rule__Model__TokensAssignment_2");
					put(grammarAccess.getModelAccess().getRulesAssignment_3(), "rule__Model__RulesAssignment_3");
					put(grammarAccess.getPlayerAccess().getNameAssignment_0(), "rule__Player__NameAssignment_0");
					put(grammarAccess.getPlayerAccess().getPlayercountAssignment_1(), "rule__Player__PlayercountAssignment_1");
					put(grammarAccess.getBoardAccess().getNameAssignment_0_0(), "rule__Board__NameAssignment_0_0");
					put(grammarAccess.getBoardAccess().getFieldsAssignment_0_2(), "rule__Board__FieldsAssignment_0_2");
					put(grammarAccess.getRulesAccess().getNameAssignment_0(), "rule__Rules__NameAssignment_0");
					put(grammarAccess.getRulesAccess().getTurnrulesAssignment_2(), "rule__Rules__TurnrulesAssignment_2");
					put(grammarAccess.getTurnRulesAccess().getNameAssignment_0(), "rule__TurnRules__NameAssignment_0");
					put(grammarAccess.getTurnRulesAccess().getActionsAssignment_2(), "rule__TurnRules__ActionsAssignment_2");
					put(grammarAccess.getTokenAccess().getNameAssignment_1(), "rule__Token__NameAssignment_1");
					put(grammarAccess.getFieldAccess().getNameAssignment_0(), "rule__Field__NameAssignment_0");
					put(grammarAccess.getFieldAccess().getXAssignment_2(), "rule__Field__XAssignment_2");
					put(grammarAccess.getFieldAccess().getYAssignment_4(), "rule__Field__YAssignment_4");
					put(grammarAccess.getFieldAccess().getZAssignment_6(), "rule__Field__ZAssignment_6");
					put(grammarAccess.getFieldAccess().getNeighboursAssignment_9(), "rule__Field__NeighboursAssignment_9");
					put(grammarAccess.getActionAccess().getNameAssignment_0_0(), "rule__Action__NameAssignment_0_0");
					put(grammarAccess.getActionAccess().getTokenAssignment_0_1(), "rule__Action__TokenAssignment_0_1");
					put(grammarAccess.getActionAccess().getNameAssignment_1(), "rule__Action__NameAssignment_1");
					put(grammarAccess.getActionAccess().getNameAssignment_2_0(), "rule__Action__NameAssignment_2_0");
					put(grammarAccess.getActionAccess().getObjectOfSelectAssignment_2_1(), "rule__Action__ObjectOfSelectAssignment_2_1");
					put(grammarAccess.getActionAccess().getFilterAssignment_2_3(), "rule__Action__FilterAssignment_2_3");
					put(grammarAccess.getActionAccess().getAssignmentAssignment_3(), "rule__Action__AssignmentAssignment_3");
					put(grammarAccess.getOrExpAccess().getExpressionsAssignment_0(), "rule__OrExp__ExpressionsAssignment_0");
					put(grammarAccess.getOrExpAccess().getOperatorsAssignment_1_0(), "rule__OrExp__OperatorsAssignment_1_0");
					put(grammarAccess.getOrExpAccess().getExpressionsAssignment_1_1(), "rule__OrExp__ExpressionsAssignment_1_1");
					put(grammarAccess.getAndExpAccess().getExpressionsAssignment_0(), "rule__AndExp__ExpressionsAssignment_0");
					put(grammarAccess.getAndExpAccess().getOperatorsAssignment_1_0(), "rule__AndExp__OperatorsAssignment_1_0");
					put(grammarAccess.getAndExpAccess().getExpressionsAssignment_1_1(), "rule__AndExp__ExpressionsAssignment_1_1");
					put(grammarAccess.getBooleanExpAccess().getLeftAssignment_0_0(), "rule__BooleanExp__LeftAssignment_0_0");
					put(grammarAccess.getBooleanExpAccess().getOperatorAssignment_0_1(), "rule__BooleanExp__OperatorAssignment_0_1");
					put(grammarAccess.getBooleanExpAccess().getRightAssignment_0_2(), "rule__BooleanExp__RightAssignment_0_2");
					put(grammarAccess.getBooleanExpAccess().getNestedExpAssignment_1_1(), "rule__BooleanExp__NestedExpAssignment_1_1");
					put(grammarAccess.getAttributeNameAccess().getNameAssignment_0(), "rule__AttributeName__NameAssignment_0");
					put(grammarAccess.getAttributeNameAccess().getParentAssignment_1_0(), "rule__AttributeName__ParentAssignment_1_0");
					put(grammarAccess.getAttributeNameAccess().getChildAssignment_1_2(), "rule__AttributeName__ChildAssignment_1_2");
					put(grammarAccess.getAttributeOrIntAccess().getAttributeAssignment_0(), "rule__AttributeOrInt__AttributeAssignment_0");
					put(grammarAccess.getAttributeOrIntAccess().getValueAssignment_1(), "rule__AttributeOrInt__ValueAssignment_1");
					put(grammarAccess.getAddtionExpAccess().getExpressionsAssignment_0(), "rule__AddtionExp__ExpressionsAssignment_0");
					put(grammarAccess.getAddtionExpAccess().getOperatorsAssignment_1_0(), "rule__AddtionExp__OperatorsAssignment_1_0");
					put(grammarAccess.getAddtionExpAccess().getExpressionsAssignment_1_1_1(), "rule__AddtionExp__ExpressionsAssignment_1_1_1");
					put(grammarAccess.getMultiplicationExpAccess().getExpressionsAssignment_0_0(), "rule__MultiplicationExp__ExpressionsAssignment_0_0");
					put(grammarAccess.getMultiplicationExpAccess().getOperatorsAssignment_0_1_0(), "rule__MultiplicationExp__OperatorsAssignment_0_1_0");
					put(grammarAccess.getMultiplicationExpAccess().getExpressionsAssignment_0_1_1_1(), "rule__MultiplicationExp__ExpressionsAssignment_0_1_1_1");
					put(grammarAccess.getValueAssignmentAccess().getNameAssignment_0(), "rule__ValueAssignment__NameAssignment_0");
					put(grammarAccess.getValueAssignmentAccess().getAdditionAssignment_2(), "rule__ValueAssignment__AdditionAssignment_2");
					put(grammarAccess.getModelAccess().getUnorderedGroup(), "rule__Model__UnorderedGroup");
					put(grammarAccess.getBoardAccess().getUnorderedGroup(), "rule__Board__UnorderedGroup");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			hu.bme.aut.gergelyszaz.ui.contentassist.antlr.internal.InternalBGLParser typedParser = (hu.bme.aut.gergelyszaz.ui.contentassist.antlr.internal.InternalBGLParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public BGLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(BGLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
