/*
* generated by Xtext
*/
package hu.bme.aut.gergelyszaz.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import hu.bme.aut.gergelyszaz.services.BGLGrammarAccess;

public class BGLParser extends AbstractContentAssistParser {
	
	@Inject
	private BGLGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected hu.bme.aut.gergelyszaz.ui.contentassist.antlr.internal.InternalBGLParser createParser() {
		hu.bme.aut.gergelyszaz.ui.contentassist.antlr.internal.InternalBGLParser result = new hu.bme.aut.gergelyszaz.ui.contentassist.antlr.internal.InternalBGLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getActionAccess().getAlternatives(), "rule__Action__Alternatives");
					put(grammarAccess.getBooleanExpressionAccess().getOpAlternatives_1_0_1_0(), "rule__BooleanExpression__OpAlternatives_1_0_1_0");
					put(grammarAccess.getAdditionAccess().getAlternatives_1_0(), "rule__Addition__Alternatives_1_0");
					put(grammarAccess.getMultiplicationAccess().getOpAlternatives_1_0_1_0(), "rule__Multiplication__OpAlternatives_1_0_1_0");
					put(grammarAccess.getPrefixedAccess().getAlternatives(), "rule__Prefixed__Alternatives");
					put(grammarAccess.getAtomicAccess().getAlternatives(), "rule__Atomic__Alternatives");
					put(grammarAccess.getAtomicAccess().getValueAlternatives_3_1_0(), "rule__Atomic__ValueAlternatives_3_1_0");
					put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
					put(grammarAccess.getModelAccess().getGroup_0(), "rule__Model__Group_0__0");
					put(grammarAccess.getPlayerAccess().getGroup(), "rule__Player__Group__0");
					put(grammarAccess.getPlayerAccess().getGroup_2(), "rule__Player__Group_2__0");
					put(grammarAccess.getBoardAccess().getGroup_0(), "rule__Board__Group_0__0");
					put(grammarAccess.getBoardAccess().getGroup_1(), "rule__Board__Group_1__0");
					put(grammarAccess.getTokensAccess().getGroup(), "rule__Tokens__Group__0");
					put(grammarAccess.getTokenTypeAccess().getGroup(), "rule__TokenType__Group__0");
					put(grammarAccess.getTokenTypeAccess().getGroup_2(), "rule__TokenType__Group_2__0");
					put(grammarAccess.getAttributeAccess().getGroup(), "rule__Attribute__Group__0");
					put(grammarAccess.getFieldAccess().getGroup(), "rule__Field__Group__0");
					put(grammarAccess.getActionAccess().getGroup_0(), "rule__Action__Group_0__0");
					put(grammarAccess.getActionAccess().getGroup_1(), "rule__Action__Group_1__0");
					put(grammarAccess.getActionAccess().getGroup_2(), "rule__Action__Group_2__0");
					put(grammarAccess.getVariableAccess().getGroup(), "rule__Variable__Group__0");
					put(grammarAccess.getBooleanExpressionAccess().getGroup(), "rule__BooleanExpression__Group__0");
					put(grammarAccess.getBooleanExpressionAccess().getGroup_1(), "rule__BooleanExpression__Group_1__0");
					put(grammarAccess.getBooleanExpressionAccess().getGroup_1_0(), "rule__BooleanExpression__Group_1_0__0");
					put(grammarAccess.getComparisonAccess().getGroup(), "rule__Comparison__Group__0");
					put(grammarAccess.getComparisonAccess().getGroup_1(), "rule__Comparison__Group_1__0");
					put(grammarAccess.getComparisonAccess().getGroup_1_0(), "rule__Comparison__Group_1_0__0");
					put(grammarAccess.getEqualsAccess().getGroup(), "rule__Equals__Group__0");
					put(grammarAccess.getEqualsAccess().getGroup_1(), "rule__Equals__Group_1__0");
					put(grammarAccess.getEqualsAccess().getGroup_1_0(), "rule__Equals__Group_1_0__0");
					put(grammarAccess.getAdditionAccess().getGroup(), "rule__Addition__Group__0");
					put(grammarAccess.getAdditionAccess().getGroup_1(), "rule__Addition__Group_1__0");
					put(grammarAccess.getAdditionAccess().getGroup_1_0_0(), "rule__Addition__Group_1_0_0__0");
					put(grammarAccess.getAdditionAccess().getGroup_1_0_1(), "rule__Addition__Group_1_0_1__0");
					put(grammarAccess.getMultiplicationAccess().getGroup(), "rule__Multiplication__Group__0");
					put(grammarAccess.getMultiplicationAccess().getGroup_1(), "rule__Multiplication__Group_1__0");
					put(grammarAccess.getMultiplicationAccess().getGroup_1_0(), "rule__Multiplication__Group_1_0__0");
					put(grammarAccess.getPrefixedAccess().getGroup_0(), "rule__Prefixed__Group_0__0");
					put(grammarAccess.getPrefixedAccess().getGroup_1(), "rule__Prefixed__Group_1__0");
					put(grammarAccess.getAtomicAccess().getGroup_0(), "rule__Atomic__Group_0__0");
					put(grammarAccess.getAtomicAccess().getGroup_1(), "rule__Atomic__Group_1__0");
					put(grammarAccess.getAtomicAccess().getGroup_2(), "rule__Atomic__Group_2__0");
					put(grammarAccess.getAtomicAccess().getGroup_3(), "rule__Atomic__Group_3__0");
					put(grammarAccess.getAtomicAccess().getGroup_4(), "rule__Atomic__Group_4__0");
					put(grammarAccess.getTypeAccess().getGroup_0(), "rule__Type__Group_0__0");
					put(grammarAccess.getTypeAccess().getGroup_1(), "rule__Type__Group_1__0");
					put(grammarAccess.getTypeAccess().getGroup_2(), "rule__Type__Group_2__0");
					put(grammarAccess.getModelAccess().getNameAssignment_0_1(), "rule__Model__NameAssignment_0_1");
					put(grammarAccess.getModelAccess().getPlayerAssignment_0_2(), "rule__Model__PlayerAssignment_0_2");
					put(grammarAccess.getModelAccess().getBoardAssignment_1(), "rule__Model__BoardAssignment_1");
					put(grammarAccess.getModelAccess().getTokensAssignment_2(), "rule__Model__TokensAssignment_2");
					put(grammarAccess.getPlayerAccess().getNameAssignment_0(), "rule__Player__NameAssignment_0");
					put(grammarAccess.getPlayerAccess().getPlayercountAssignment_1(), "rule__Player__PlayercountAssignment_1");
					put(grammarAccess.getPlayerAccess().getAttributesAssignment_2_1(), "rule__Player__AttributesAssignment_2_1");
					put(grammarAccess.getBoardAccess().getNameAssignment_0_0(), "rule__Board__NameAssignment_0_0");
					put(grammarAccess.getBoardAccess().getFieldsAssignment_0_2(), "rule__Board__FieldsAssignment_0_2");
					put(grammarAccess.getBoardAccess().getAttributesAssignment_1_0(), "rule__Board__AttributesAssignment_1_0");
					put(grammarAccess.getTokensAccess().getNameAssignment_0(), "rule__Tokens__NameAssignment_0");
					put(grammarAccess.getTokensAccess().getTokentypesAssignment_2(), "rule__Tokens__TokentypesAssignment_2");
					put(grammarAccess.getTokenTypeAccess().getNameAssignment_0(), "rule__TokenType__NameAssignment_0");
					put(grammarAccess.getTokenTypeAccess().getVariablesAssignment_1(), "rule__TokenType__VariablesAssignment_1");
					put(grammarAccess.getTokenTypeAccess().getAttributesAssignment_2_1(), "rule__TokenType__AttributesAssignment_2_1");
					put(grammarAccess.getAttributeAccess().getNameAssignment_0(), "rule__Attribute__NameAssignment_0");
					put(grammarAccess.getFieldAccess().getNameAssignment_0(), "rule__Field__NameAssignment_0");
					put(grammarAccess.getFieldAccess().getXAssignment_2(), "rule__Field__XAssignment_2");
					put(grammarAccess.getFieldAccess().getYAssignment_4(), "rule__Field__YAssignment_4");
					put(grammarAccess.getFieldAccess().getZAssignment_6(), "rule__Field__ZAssignment_6");
					put(grammarAccess.getFieldAccess().getNeighboursAssignment_9(), "rule__Field__NeighboursAssignment_9");
					put(grammarAccess.getActionAccess().getNameAssignment_0_0(), "rule__Action__NameAssignment_0_0");
					put(grammarAccess.getActionAccess().getTokenAssignment_0_1(), "rule__Action__TokenAssignment_0_1");
					put(grammarAccess.getActionAccess().getNameAssignment_1_0(), "rule__Action__NameAssignment_1_0");
					put(grammarAccess.getActionAccess().getFieldAssignment_1_1(), "rule__Action__FieldAssignment_1_1");
					put(grammarAccess.getActionAccess().getNameAssignment_2_0(), "rule__Action__NameAssignment_2_0");
					put(grammarAccess.getActionAccess().getFromAssignment_2_1(), "rule__Action__FromAssignment_2_1");
					put(grammarAccess.getActionAccess().getToAssignment_2_3(), "rule__Action__ToAssignment_2_3");
					put(grammarAccess.getVariableAccess().getNameAssignment_0(), "rule__Variable__NameAssignment_0");
					put(grammarAccess.getVariableAccess().getExpressionAssignment_2(), "rule__Variable__ExpressionAssignment_2");
					put(grammarAccess.getBooleanExpressionAccess().getOpAssignment_1_0_1(), "rule__BooleanExpression__OpAssignment_1_0_1");
					put(grammarAccess.getBooleanExpressionAccess().getRightAssignment_1_1(), "rule__BooleanExpression__RightAssignment_1_1");
					put(grammarAccess.getComparisonAccess().getOpAssignment_1_0_1(), "rule__Comparison__OpAssignment_1_0_1");
					put(grammarAccess.getComparisonAccess().getRightAssignment_1_1(), "rule__Comparison__RightAssignment_1_1");
					put(grammarAccess.getEqualsAccess().getOpAssignment_1_0_1(), "rule__Equals__OpAssignment_1_0_1");
					put(grammarAccess.getEqualsAccess().getRightAssignment_1_1(), "rule__Equals__RightAssignment_1_1");
					put(grammarAccess.getAdditionAccess().getRightAssignment_1_1(), "rule__Addition__RightAssignment_1_1");
					put(grammarAccess.getMultiplicationAccess().getOpAssignment_1_0_1(), "rule__Multiplication__OpAssignment_1_0_1");
					put(grammarAccess.getMultiplicationAccess().getRightAssignment_1_1(), "rule__Multiplication__RightAssignment_1_1");
					put(grammarAccess.getPrefixedAccess().getExpressionAssignment_0_2(), "rule__Prefixed__ExpressionAssignment_0_2");
					put(grammarAccess.getPrefixedAccess().getExpressionAssignment_1_2(), "rule__Prefixed__ExpressionAssignment_1_2");
					put(grammarAccess.getAtomicAccess().getValueAssignment_1_1(), "rule__Atomic__ValueAssignment_1_1");
					put(grammarAccess.getAtomicAccess().getValueAssignment_2_1(), "rule__Atomic__ValueAssignment_2_1");
					put(grammarAccess.getAtomicAccess().getValueAssignment_3_1(), "rule__Atomic__ValueAssignment_3_1");
					put(grammarAccess.getAtomicAccess().getRefAssignment_4_1(), "rule__Atomic__RefAssignment_4_1");
					put(grammarAccess.getModelAccess().getUnorderedGroup(), "rule__Model__UnorderedGroup");
					put(grammarAccess.getBoardAccess().getUnorderedGroup(), "rule__Board__UnorderedGroup");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			hu.bme.aut.gergelyszaz.ui.contentassist.antlr.internal.InternalBGLParser typedParser = (hu.bme.aut.gergelyszaz.ui.contentassist.antlr.internal.InternalBGLParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public BGLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(BGLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
