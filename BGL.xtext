grammar hu.bme.aut.gergelyszaz.BGL with org.eclipse.xtext.common.Terminals

generate bGL "http://www.bme.hu/aut/gergelyszaz/BGL"

Model:
	'GAME' name=ID
	 player=Player 
	 board=Board 
	 (tokens+=Token)* 
	 (cards+=Card)*
	 
	 'RULES' '{' (rules+=Action)* '}'
	 ('WIN CONDITION' '{' (winCondition=OrExp) '}')?
	 ('LOSE CONDITION' '{' (loseCondition=OrExp) '}')?
;

Player:
	name='PLAYERS' playercount=INT
	'{'
		(variables+=SimpleAssignment)*
		(decks+=Deck)*
		(playerSetups+=PlayerSetup)*	
	'}'
	;
	
PlayerSetup:
	name='PLAYER' id=INT 
	'{'
	(setupRules+=Action)*
	'}'
;

Board:
	
	name='BOARD' '{'
	(decks+=Deck)*
	(variables+=SimpleAssignment)*
	(fields+=Field)* 
	'}'
	;
	


Token returns Token:
	'TOKEN' name=ID '{' (variables+=SimpleAssignment)* '}'
;

Field:
	('FIELD')? name=ID '(' x=INT ',' y=INT ',' z=INT ')' '{'
	(neighbours+=[Field])* 
	(variables+=SimpleAssignment)*
	'}';

Action:
	
	(name='SPAWN' (token=[Token]) )|
	(name='MOVE' objectOfSelect=('TOKEN'|'CARD')?) | (name='DESTROY') | (name='WIN') | (name='LOSE') |
	(name='SELECT' objectOfSelect=('TOKEN'|'FIELD'|'CARD'|'DECK'|'PLAYER') 'WHERE' filter=OrExp)	|
	(name='ROLL' numberOfDice=INT  from=INT '-' to=INT) |
	(assignment=ValueAssignment) |
	(gotoCondition=GotoCondition) |
	(label=Label) |
	(name='SHUFFLE')
	
	;
	
	
//Cardgame specific parts
Card:
	'CARD' name=ID
	'{'
	(variables+=SimpleAssignment)*
	('ACTION' '{'(actions+=Action)* '}')?
	('CONDITION' '{' (condition=OrExp)? '}')?
	'}'
;

Deck:
	visibility=('PUBLIC'|'PROTECTED'|'PRIVATE') 'DECK'
	name=ID
	'{'
	(cards+=[Card])*
	'}'
;



//Part for writing condition
OrExp:
	expressions+=AndExp (operators+='OR' expressions+=AndExp)*
;

AndExp:
	expressions+=BooleanExp (operators+='AND' expressions+=BooleanExp)*
;

BooleanExp:
	(not='NOT')?
	(left=AttributeOrInt name=('!=='|'==='|'=='|'!='|'>'|'>='|'<'|'<=') right=AttributeOrInt)
	|
	( '('nestedExp=OrExp')' )
;

AttributeName:
	( name=ID|(parent=ID'.'child=AttributeName) )
;

AttributeOrInt:
	attribute=AttributeName| value=INT
;

GotoCondition:
	'IF' condition=OrExp name='GOTO' goto=[Label]
;

Label:
	'LABEL' name=ID 
;



//Arithmetic operations and value assignment
AdditionExp:
	expressions+=MultiplicationExp (operators+= ('+'|'-') expressions+=MultiplicationExp)*
;

MultiplicationExp:
	(expressions+=AttributeOrInt (operators+= ('*'|'/') expressions+=AttributeOrInt)*)
	|
	( '(' nestedExp=AdditionExp ')' )
;

ValueAssignment:
	name=AttributeName  '=' addition=AdditionExp 
;

SimpleAssignment:
	name=ID '=' attribute=AttributeOrInt
;







