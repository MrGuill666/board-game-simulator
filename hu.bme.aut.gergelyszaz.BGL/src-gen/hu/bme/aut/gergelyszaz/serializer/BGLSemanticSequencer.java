/*
 * generated by Xtext
 */
package hu.bme.aut.gergelyszaz.serializer;

import com.google.inject.Inject;
import com.google.inject.Provider;
import hu.bme.aut.gergelyszaz.bGL.Action;
import hu.bme.aut.gergelyszaz.bGL.AddtionExp;
import hu.bme.aut.gergelyszaz.bGL.AndExp;
import hu.bme.aut.gergelyszaz.bGL.AttributeName;
import hu.bme.aut.gergelyszaz.bGL.AttributeOrInt;
import hu.bme.aut.gergelyszaz.bGL.BGLPackage;
import hu.bme.aut.gergelyszaz.bGL.Board;
import hu.bme.aut.gergelyszaz.bGL.BooleanExp;
import hu.bme.aut.gergelyszaz.bGL.Field;
import hu.bme.aut.gergelyszaz.bGL.Model;
import hu.bme.aut.gergelyszaz.bGL.MultiplicationExp;
import hu.bme.aut.gergelyszaz.bGL.OrExp;
import hu.bme.aut.gergelyszaz.bGL.Player;
import hu.bme.aut.gergelyszaz.bGL.Rules;
import hu.bme.aut.gergelyszaz.bGL.Token;
import hu.bme.aut.gergelyszaz.bGL.TurnRules;
import hu.bme.aut.gergelyszaz.bGL.ValueAssignment;
import hu.bme.aut.gergelyszaz.services.BGLGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticNodeProvider.INodesForEObjectProvider;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class BGLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private BGLGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == BGLPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case BGLPackage.ACTION:
				sequence_Action(context, (Action) semanticObject); 
				return; 
			case BGLPackage.ADDTION_EXP:
				sequence_AddtionExp(context, (AddtionExp) semanticObject); 
				return; 
			case BGLPackage.AND_EXP:
				sequence_AndExp(context, (AndExp) semanticObject); 
				return; 
			case BGLPackage.ATTRIBUTE_NAME:
				sequence_AttributeName(context, (AttributeName) semanticObject); 
				return; 
			case BGLPackage.ATTRIBUTE_OR_INT:
				sequence_AttributeOrInt(context, (AttributeOrInt) semanticObject); 
				return; 
			case BGLPackage.BOARD:
				sequence_Board(context, (Board) semanticObject); 
				return; 
			case BGLPackage.BOOLEAN_EXP:
				sequence_BooleanExp(context, (BooleanExp) semanticObject); 
				return; 
			case BGLPackage.FIELD:
				sequence_Field(context, (Field) semanticObject); 
				return; 
			case BGLPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case BGLPackage.MULTIPLICATION_EXP:
				sequence_MultiplicationExp(context, (MultiplicationExp) semanticObject); 
				return; 
			case BGLPackage.OR_EXP:
				sequence_OrExp(context, (OrExp) semanticObject); 
				return; 
			case BGLPackage.PLAYER:
				sequence_Player(context, (Player) semanticObject); 
				return; 
			case BGLPackage.RULES:
				sequence_Rules(context, (Rules) semanticObject); 
				return; 
			case BGLPackage.TOKEN:
				sequence_Token(context, (Token) semanticObject); 
				return; 
			case BGLPackage.TURN_RULES:
				sequence_TurnRules(context, (TurnRules) semanticObject); 
				return; 
			case BGLPackage.VALUE_ASSIGNMENT:
				sequence_ValueAssignment(context, (ValueAssignment) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     (
	 *         (name='SPAWN' token=[Token|ID]) | 
	 *         name='MOVE' | 
	 *         (name='SELECT' (objectOfSelect='TOKEN' | objectOfSelect='FIELD') filter=OrExp) | 
	 *         assignment=ValueAssignment
	 *     )
	 */
	protected void sequence_Action(EObject context, Action semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (expressions+=MultiplicationExp (operators+='+' | expressions+=MultiplicationExp)*)
	 */
	protected void sequence_AddtionExp(EObject context, AddtionExp semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (expressions+=BooleanExp (operators+='AND' expressions+=BooleanExp)*)
	 */
	protected void sequence_AndExp(EObject context, AndExp semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID | (parent=ID child=AttributeName))
	 */
	protected void sequence_AttributeName(EObject context, AttributeName semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (attribute=AttributeName | value=INT)
	 */
	protected void sequence_AttributeOrInt(EObject context, AttributeOrInt semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name='BOARD' fields+=Field*)
	 */
	protected void sequence_Board(EObject context, Board semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         (
	 *             left=AttributeOrInt 
	 *             (
	 *                 operator='!==' | 
	 *                 operator='===' | 
	 *                 operator='==' | 
	 *                 operator='!=' | 
	 *                 operator='>' | 
	 *                 operator='>=' | 
	 *                 operator='<' | 
	 *                 operator='<='
	 *             ) 
	 *             right=AttributeOrInt
	 *         ) | 
	 *         nestedExp=OrExp
	 *     )
	 */
	protected void sequence_BooleanExp(EObject context, BooleanExp semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID x=INT y=INT z=INT neighbours+=[Field|ID]*)
	 */
	protected void sequence_Field(EObject context, Field semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID player=Player board=Board tokens+=Token* rules=Rules)
	 */
	protected void sequence_Model(EObject context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (expressions+=AttributeOrInt (operators+='*' | expressions+=AttributeOrInt)*)
	 */
	protected void sequence_MultiplicationExp(EObject context, MultiplicationExp semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (expressions+=AndExp (operators+='OR' expressions+=AndExp)*)
	 */
	protected void sequence_OrExp(EObject context, OrExp semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name='PLAYERS' playercount=INT)
	 */
	protected void sequence_Player(EObject context, Player semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, BGLPackage.Literals.PLAYER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BGLPackage.Literals.PLAYER__NAME));
			if(transientValues.isValueTransient(semanticObject, BGLPackage.Literals.PLAYER__PLAYERCOUNT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BGLPackage.Literals.PLAYER__PLAYERCOUNT));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getPlayerAccess().getNamePLAYERSKeyword_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getPlayerAccess().getPlayercountINTTerminalRuleCall_1_0(), semanticObject.getPlayercount());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (name='RULES' turnrules=TurnRules)
	 */
	protected void sequence_Rules(EObject context, Rules semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, BGLPackage.Literals.RULES__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BGLPackage.Literals.RULES__NAME));
			if(transientValues.isValueTransient(semanticObject, BGLPackage.Literals.RULES__TURNRULES) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BGLPackage.Literals.RULES__TURNRULES));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getRulesAccess().getNameRULESKeyword_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getRulesAccess().getTurnrulesTurnRulesParserRuleCall_2_0(), semanticObject.getTurnrules());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Token(EObject context, Token semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, BGLPackage.Literals.TOKEN__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BGLPackage.Literals.TOKEN__NAME));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getTokenAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (name='TURN' actions+=Action*)
	 */
	protected void sequence_TurnRules(EObject context, TurnRules semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=AttributeName addition=AddtionExp)
	 */
	protected void sequence_ValueAssignment(EObject context, ValueAssignment semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, BGLPackage.Literals.VALUE_ASSIGNMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BGLPackage.Literals.VALUE_ASSIGNMENT__NAME));
			if(transientValues.isValueTransient(semanticObject, BGLPackage.Literals.VALUE_ASSIGNMENT__ADDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BGLPackage.Literals.VALUE_ASSIGNMENT__ADDITION));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getValueAssignmentAccess().getNameAttributeNameParserRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getValueAssignmentAccess().getAdditionAddtionExpParserRuleCall_2_0(), semanticObject.getAddition());
		feeder.finish();
	}
}
