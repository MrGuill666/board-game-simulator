/*
 * generated by Xtext
 */
package hu.bme.aut.gergelyszaz.serializer;

import com.google.inject.Inject;
import com.google.inject.Provider;
import hu.bme.aut.gergelyszaz.bGL.Action;
import hu.bme.aut.gergelyszaz.bGL.BGLPackage;
import hu.bme.aut.gergelyszaz.bGL.Board;
import hu.bme.aut.gergelyszaz.bGL.Field;
import hu.bme.aut.gergelyszaz.bGL.Model;
import hu.bme.aut.gergelyszaz.bGL.Player;
import hu.bme.aut.gergelyszaz.bGL.Reference;
import hu.bme.aut.gergelyszaz.bGL.Rules;
import hu.bme.aut.gergelyszaz.bGL.Token;
import hu.bme.aut.gergelyszaz.bGL.TurnRules;
import hu.bme.aut.gergelyszaz.bGL.Variable;
import hu.bme.aut.gergelyszaz.services.BGLGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticNodeProvider.INodesForEObjectProvider;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class BGLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private BGLGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == BGLPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case BGLPackage.ACTION:
				sequence_Action(context, (Action) semanticObject); 
				return; 
			case BGLPackage.BOARD:
				sequence_Board(context, (Board) semanticObject); 
				return; 
			case BGLPackage.FIELD:
				sequence_Field(context, (Field) semanticObject); 
				return; 
			case BGLPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case BGLPackage.PLAYER:
				sequence_Player(context, (Player) semanticObject); 
				return; 
			case BGLPackage.REFERENCE:
				sequence_Reference(context, (Reference) semanticObject); 
				return; 
			case BGLPackage.RULES:
				sequence_Rules(context, (Rules) semanticObject); 
				return; 
			case BGLPackage.TOKEN:
				sequence_Token(context, (Token) semanticObject); 
				return; 
			case BGLPackage.TURN_RULES:
				sequence_TurnRules(context, (TurnRules) semanticObject); 
				return; 
			case BGLPackage.VARIABLE:
				sequence_Variable(context, (Variable) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     ((name='Spawn' token=[Token|ID]) | name='Move' | (name='Select' (objectOfSelect='token' | objectOfSelect='field')))
	 */
	protected void sequence_Action(EObject context, Action semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name='Board' fields+=Field* attributes+=Variable*)
	 */
	protected void sequence_Board(EObject context, Board semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         x=INT 
	 *         y=INT 
	 *         z=INT 
	 *         neighbours+=[Field|ID]* 
	 *         variables+=Variable*
	 *     )
	 */
	protected void sequence_Field(EObject context, Field semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID player=Player board=Board tokens+=Token* rules=Rules)
	 */
	protected void sequence_Model(EObject context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name='Players' playercount=INT attributes+=Variable*)
	 */
	protected void sequence_Player(EObject context, Player semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID value=[Variable|ID])
	 */
	protected void sequence_Reference(EObject context, Reference semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, BGLPackage.Literals.REFERENCE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BGLPackage.Literals.REFERENCE__NAME));
			if(transientValues.isValueTransient(semanticObject, BGLPackage.Literals.REFERENCE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BGLPackage.Literals.REFERENCE__VALUE));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getReferenceAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getReferenceAccess().getValueVariableIDTerminalRuleCall_2_0_1(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (name='Rules' turnrules=TurnRules)
	 */
	protected void sequence_Rules(EObject context, Rules semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, BGLPackage.Literals.RULES__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BGLPackage.Literals.RULES__NAME));
			if(transientValues.isValueTransient(semanticObject, BGLPackage.Literals.RULES__TURNRULES) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BGLPackage.Literals.RULES__TURNRULES));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getRulesAccess().getNameRulesKeyword_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getRulesAccess().getTurnrulesTurnRulesParserRuleCall_2_0(), semanticObject.getTurnrules());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Token(EObject context, Token semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, BGLPackage.Literals.TOKEN__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BGLPackage.Literals.TOKEN__NAME));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getTokenAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (name='Turn' actions+=Action*)
	 */
	protected void sequence_TurnRules(EObject context, TurnRules semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID value=INT)
	 */
	protected void sequence_Variable(EObject context, Variable semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, BGLPackage.Literals.VARIABLE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BGLPackage.Literals.VARIABLE__NAME));
			if(transientValues.isValueTransient(semanticObject, BGLPackage.Literals.VARIABLE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BGLPackage.Literals.VARIABLE__VALUE));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getVariableAccess().getValueINTTerminalRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
}
