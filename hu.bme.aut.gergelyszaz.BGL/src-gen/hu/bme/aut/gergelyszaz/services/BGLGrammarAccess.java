/*
 * generated by Xtext
 */
package hu.bme.aut.gergelyszaz.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class BGLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cUnorderedGroup.eContents().get(0);
		private final Keyword cGAMEKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Assignment cPlayerAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cPlayerPlayerParserRuleCall_0_2_0 = (RuleCall)cPlayerAssignment_0_2.eContents().get(0);
		private final Assignment cBoardAssignment_1 = (Assignment)cUnorderedGroup.eContents().get(1);
		private final RuleCall cBoardBoardParserRuleCall_1_0 = (RuleCall)cBoardAssignment_1.eContents().get(0);
		private final Assignment cTokensAssignment_2 = (Assignment)cUnorderedGroup.eContents().get(2);
		private final RuleCall cTokensTokenParserRuleCall_2_0 = (RuleCall)cTokensAssignment_2.eContents().get(0);
		private final Assignment cRulesAssignment_3 = (Assignment)cUnorderedGroup.eContents().get(3);
		private final RuleCall cRulesRulesParserRuleCall_3_0 = (RuleCall)cRulesAssignment_3.eContents().get(0);
		
		//Model:
		//	"GAME" name=ID player=Player & board=Board & tokens+=Token* & rules=Rules;
		@Override public ParserRule getRule() { return rule; }

		//"GAME" name=ID player=Player & board=Board & tokens+=Token* & rules=Rules
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }

		//"GAME" name=ID player=Player
		public Group getGroup_0() { return cGroup_0; }

		//"GAME"
		public Keyword getGAMEKeyword_0_0() { return cGAMEKeyword_0_0; }

		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }

		//player=Player
		public Assignment getPlayerAssignment_0_2() { return cPlayerAssignment_0_2; }

		//Player
		public RuleCall getPlayerPlayerParserRuleCall_0_2_0() { return cPlayerPlayerParserRuleCall_0_2_0; }

		//board=Board
		public Assignment getBoardAssignment_1() { return cBoardAssignment_1; }

		//Board
		public RuleCall getBoardBoardParserRuleCall_1_0() { return cBoardBoardParserRuleCall_1_0; }

		//tokens+=Token*
		public Assignment getTokensAssignment_2() { return cTokensAssignment_2; }

		//Token
		public RuleCall getTokensTokenParserRuleCall_2_0() { return cTokensTokenParserRuleCall_2_0; }

		//rules=Rules
		public Assignment getRulesAssignment_3() { return cRulesAssignment_3; }

		//Rules
		public RuleCall getRulesRulesParserRuleCall_3_0() { return cRulesRulesParserRuleCall_3_0; }
	}

	public class PlayerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Player");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNamePLAYERSKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cPlayercountAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPlayercountINTTerminalRuleCall_1_0 = (RuleCall)cPlayercountAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVariablesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVariablesSimpleAssignmentParserRuleCall_3_0 = (RuleCall)cVariablesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Player:
		//	name="PLAYERS" playercount=INT "{" variables+=SimpleAssignment* "}";
		@Override public ParserRule getRule() { return rule; }

		//name="PLAYERS" playercount=INT "{" variables+=SimpleAssignment* "}"
		public Group getGroup() { return cGroup; }

		//name="PLAYERS"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"PLAYERS"
		public Keyword getNamePLAYERSKeyword_0_0() { return cNamePLAYERSKeyword_0_0; }

		//playercount=INT
		public Assignment getPlayercountAssignment_1() { return cPlayercountAssignment_1; }

		//INT
		public RuleCall getPlayercountINTTerminalRuleCall_1_0() { return cPlayercountINTTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//variables+=SimpleAssignment*
		public Assignment getVariablesAssignment_3() { return cVariablesAssignment_3; }

		//SimpleAssignment
		public RuleCall getVariablesSimpleAssignmentParserRuleCall_3_0() { return cVariablesSimpleAssignmentParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class BoardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Board");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameBOARDKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVariablesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariablesSimpleAssignmentParserRuleCall_2_0 = (RuleCall)cVariablesAssignment_2.eContents().get(0);
		private final Assignment cFieldsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFieldsFieldParserRuleCall_3_0 = (RuleCall)cFieldsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Board:
		//	name="BOARD" "{" variables+=SimpleAssignment* fields+=Field* "}";
		@Override public ParserRule getRule() { return rule; }

		//name="BOARD" "{" variables+=SimpleAssignment* fields+=Field* "}"
		public Group getGroup() { return cGroup; }

		//name="BOARD"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"BOARD"
		public Keyword getNameBOARDKeyword_0_0() { return cNameBOARDKeyword_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//variables+=SimpleAssignment*
		public Assignment getVariablesAssignment_2() { return cVariablesAssignment_2; }

		//SimpleAssignment
		public RuleCall getVariablesSimpleAssignmentParserRuleCall_2_0() { return cVariablesSimpleAssignmentParserRuleCall_2_0; }

		//fields+=Field*
		public Assignment getFieldsAssignment_3() { return cFieldsAssignment_3; }

		//Field
		public RuleCall getFieldsFieldParserRuleCall_3_0() { return cFieldsFieldParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class RulesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Rules");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameRULESKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTurnrulesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTurnrulesTurnRulesParserRuleCall_2_0 = (RuleCall)cTurnrulesAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Rules:
		//	name="RULES" "{" turnrules=TurnRules "}";
		@Override public ParserRule getRule() { return rule; }

		//name="RULES" "{" turnrules=TurnRules "}"
		public Group getGroup() { return cGroup; }

		//name="RULES"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"RULES"
		public Keyword getNameRULESKeyword_0_0() { return cNameRULESKeyword_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//turnrules=TurnRules
		public Assignment getTurnrulesAssignment_2() { return cTurnrulesAssignment_2; }

		//TurnRules
		public RuleCall getTurnrulesTurnRulesParserRuleCall_2_0() { return cTurnrulesTurnRulesParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class TurnRulesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TurnRules");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameTURNKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cActionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cActionsActionParserRuleCall_2_0 = (RuleCall)cActionsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//TurnRules:
		//	name="TURN" "{" actions+=Action* "}";
		@Override public ParserRule getRule() { return rule; }

		//name="TURN" "{" actions+=Action* "}"
		public Group getGroup() { return cGroup; }

		//name="TURN"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"TURN"
		public Keyword getNameTURNKeyword_0_0() { return cNameTURNKeyword_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//actions+=Action*
		public Assignment getActionsAssignment_2() { return cActionsAssignment_2; }

		//Action
		public RuleCall getActionsActionParserRuleCall_2_0() { return cActionsActionParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class TokenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Token");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTOKENKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVariablesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVariablesSimpleAssignmentParserRuleCall_3_0 = (RuleCall)cVariablesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Token:
		//	"TOKEN" name=ID "{" variables+=SimpleAssignment* "}";
		@Override public ParserRule getRule() { return rule; }

		//"TOKEN" name=ID "{" variables+=SimpleAssignment* "}"
		public Group getGroup() { return cGroup; }

		//"TOKEN"
		public Keyword getTOKENKeyword_0() { return cTOKENKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//variables+=SimpleAssignment*
		public Assignment getVariablesAssignment_3() { return cVariablesAssignment_3; }

		//SimpleAssignment
		public RuleCall getVariablesSimpleAssignmentParserRuleCall_3_0() { return cVariablesSimpleAssignmentParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class FieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Field");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cXAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cXINTTerminalRuleCall_2_0 = (RuleCall)cXAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cYAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cYINTTerminalRuleCall_4_0 = (RuleCall)cYAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cZAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cZINTTerminalRuleCall_6_0 = (RuleCall)cZAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cLeftCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cNeighboursAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final CrossReference cNeighboursFieldCrossReference_9_0 = (CrossReference)cNeighboursAssignment_9.eContents().get(0);
		private final RuleCall cNeighboursFieldIDTerminalRuleCall_9_0_1 = (RuleCall)cNeighboursFieldCrossReference_9_0.eContents().get(1);
		private final Assignment cVariablesAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cVariablesSimpleAssignmentParserRuleCall_10_0 = (RuleCall)cVariablesAssignment_10.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//Field:
		//	name=ID "(" x=INT "," y=INT "," z=INT ")" "{" neighbours+=[Field]* variables+=SimpleAssignment* "}";
		@Override public ParserRule getRule() { return rule; }

		//name=ID "(" x=INT "," y=INT "," z=INT ")" "{" neighbours+=[Field]* variables+=SimpleAssignment* "}"
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//x=INT
		public Assignment getXAssignment_2() { return cXAssignment_2; }

		//INT
		public RuleCall getXINTTerminalRuleCall_2_0() { return cXINTTerminalRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//y=INT
		public Assignment getYAssignment_4() { return cYAssignment_4; }

		//INT
		public RuleCall getYINTTerminalRuleCall_4_0() { return cYINTTerminalRuleCall_4_0; }

		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//z=INT
		public Assignment getZAssignment_6() { return cZAssignment_6; }

		//INT
		public RuleCall getZINTTerminalRuleCall_6_0() { return cZINTTerminalRuleCall_6_0; }

		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_8() { return cLeftCurlyBracketKeyword_8; }

		//neighbours+=[Field]*
		public Assignment getNeighboursAssignment_9() { return cNeighboursAssignment_9; }

		//[Field]
		public CrossReference getNeighboursFieldCrossReference_9_0() { return cNeighboursFieldCrossReference_9_0; }

		//ID
		public RuleCall getNeighboursFieldIDTerminalRuleCall_9_0_1() { return cNeighboursFieldIDTerminalRuleCall_9_0_1; }

		//variables+=SimpleAssignment*
		public Assignment getVariablesAssignment_10() { return cVariablesAssignment_10; }

		//SimpleAssignment
		public RuleCall getVariablesSimpleAssignmentParserRuleCall_10_0() { return cVariablesSimpleAssignmentParserRuleCall_10_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
	}

	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Action");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cNameSPAWNKeyword_0_0_0 = (Keyword)cNameAssignment_0_0.eContents().get(0);
		private final Assignment cTokenAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cTokenTokenCrossReference_0_1_0 = (CrossReference)cTokenAssignment_0_1.eContents().get(0);
		private final RuleCall cTokenTokenIDTerminalRuleCall_0_1_0_1 = (RuleCall)cTokenTokenCrossReference_0_1_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cNameMOVEKeyword_1_0 = (Keyword)cNameAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cNameDESTROYKeyword_2_0 = (Keyword)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cNameAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cNameSELECTKeyword_3_0_0 = (Keyword)cNameAssignment_3_0.eContents().get(0);
		private final Assignment cObjectOfSelectAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final Alternatives cObjectOfSelectAlternatives_3_1_0 = (Alternatives)cObjectOfSelectAssignment_3_1.eContents().get(0);
		private final Keyword cObjectOfSelectTOKENKeyword_3_1_0_0 = (Keyword)cObjectOfSelectAlternatives_3_1_0.eContents().get(0);
		private final Keyword cObjectOfSelectFIELDKeyword_3_1_0_1 = (Keyword)cObjectOfSelectAlternatives_3_1_0.eContents().get(1);
		private final Keyword cWHEREKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cFilterAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cFilterOrExpParserRuleCall_3_3_0 = (RuleCall)cFilterAssignment_3_3.eContents().get(0);
		private final Assignment cAssignmentAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cAssignmentValueAssignmentParserRuleCall_4_0 = (RuleCall)cAssignmentAssignment_4.eContents().get(0);
		private final Assignment cGotoConditionAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cGotoConditionGotoConditionParserRuleCall_5_0 = (RuleCall)cGotoConditionAssignment_5.eContents().get(0);
		private final Assignment cLabelAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final RuleCall cLabelLabelParserRuleCall_6_0 = (RuleCall)cLabelAssignment_6.eContents().get(0);
		
		//Action:
		//	name="SPAWN" token=[Token] | name="MOVE" | name="DESTROY" | name="SELECT" objectOfSelect=("TOKEN" | "FIELD") "WHERE"
		//	filter=OrExp | assignment=ValueAssignment | gotoCondition=GotoCondition | label=Label;
		@Override public ParserRule getRule() { return rule; }

		//name="SPAWN" token=[Token] | name="MOVE" | name="DESTROY" | name="SELECT" objectOfSelect=("TOKEN" | "FIELD") "WHERE"
		//filter=OrExp | assignment=ValueAssignment | gotoCondition=GotoCondition | label=Label
		public Alternatives getAlternatives() { return cAlternatives; }

		//name="SPAWN" token=[Token]
		public Group getGroup_0() { return cGroup_0; }

		//name="SPAWN"
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }

		//"SPAWN"
		public Keyword getNameSPAWNKeyword_0_0_0() { return cNameSPAWNKeyword_0_0_0; }

		//token=[Token]
		public Assignment getTokenAssignment_0_1() { return cTokenAssignment_0_1; }

		//[Token]
		public CrossReference getTokenTokenCrossReference_0_1_0() { return cTokenTokenCrossReference_0_1_0; }

		//ID
		public RuleCall getTokenTokenIDTerminalRuleCall_0_1_0_1() { return cTokenTokenIDTerminalRuleCall_0_1_0_1; }

		//name="MOVE"
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//"MOVE"
		public Keyword getNameMOVEKeyword_1_0() { return cNameMOVEKeyword_1_0; }

		//name="DESTROY"
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//"DESTROY"
		public Keyword getNameDESTROYKeyword_2_0() { return cNameDESTROYKeyword_2_0; }

		//name="SELECT" objectOfSelect=("TOKEN" | "FIELD") "WHERE" filter=OrExp
		public Group getGroup_3() { return cGroup_3; }

		//name="SELECT"
		public Assignment getNameAssignment_3_0() { return cNameAssignment_3_0; }

		//"SELECT"
		public Keyword getNameSELECTKeyword_3_0_0() { return cNameSELECTKeyword_3_0_0; }

		//objectOfSelect=("TOKEN" | "FIELD")
		public Assignment getObjectOfSelectAssignment_3_1() { return cObjectOfSelectAssignment_3_1; }

		//"TOKEN" | "FIELD"
		public Alternatives getObjectOfSelectAlternatives_3_1_0() { return cObjectOfSelectAlternatives_3_1_0; }

		//"TOKEN"
		public Keyword getObjectOfSelectTOKENKeyword_3_1_0_0() { return cObjectOfSelectTOKENKeyword_3_1_0_0; }

		//"FIELD"
		public Keyword getObjectOfSelectFIELDKeyword_3_1_0_1() { return cObjectOfSelectFIELDKeyword_3_1_0_1; }

		//"WHERE"
		public Keyword getWHEREKeyword_3_2() { return cWHEREKeyword_3_2; }

		//filter=OrExp
		public Assignment getFilterAssignment_3_3() { return cFilterAssignment_3_3; }

		//OrExp
		public RuleCall getFilterOrExpParserRuleCall_3_3_0() { return cFilterOrExpParserRuleCall_3_3_0; }

		//assignment=ValueAssignment
		public Assignment getAssignmentAssignment_4() { return cAssignmentAssignment_4; }

		//ValueAssignment
		public RuleCall getAssignmentValueAssignmentParserRuleCall_4_0() { return cAssignmentValueAssignmentParserRuleCall_4_0; }

		//gotoCondition=GotoCondition
		public Assignment getGotoConditionAssignment_5() { return cGotoConditionAssignment_5; }

		//GotoCondition
		public RuleCall getGotoConditionGotoConditionParserRuleCall_5_0() { return cGotoConditionGotoConditionParserRuleCall_5_0; }

		//label=Label
		public Assignment getLabelAssignment_6() { return cLabelAssignment_6; }

		//Label
		public RuleCall getLabelLabelParserRuleCall_6_0() { return cLabelLabelParserRuleCall_6_0; }
	}

	public class OrExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpressionsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpressionsAndExpParserRuleCall_0_0 = (RuleCall)cExpressionsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOperatorsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cOperatorsORKeyword_1_0_0 = (Keyword)cOperatorsAssignment_1_0.eContents().get(0);
		private final Assignment cExpressionsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionsAndExpParserRuleCall_1_1_0 = (RuleCall)cExpressionsAssignment_1_1.eContents().get(0);
		
		////Part for writing condition
		//OrExp:
		//	expressions+=AndExp (operators+="OR" expressions+=AndExp)*;
		@Override public ParserRule getRule() { return rule; }

		//expressions+=AndExp (operators+="OR" expressions+=AndExp)*
		public Group getGroup() { return cGroup; }

		//expressions+=AndExp
		public Assignment getExpressionsAssignment_0() { return cExpressionsAssignment_0; }

		//AndExp
		public RuleCall getExpressionsAndExpParserRuleCall_0_0() { return cExpressionsAndExpParserRuleCall_0_0; }

		//(operators+="OR" expressions+=AndExp)*
		public Group getGroup_1() { return cGroup_1; }

		//operators+="OR"
		public Assignment getOperatorsAssignment_1_0() { return cOperatorsAssignment_1_0; }

		//"OR"
		public Keyword getOperatorsORKeyword_1_0_0() { return cOperatorsORKeyword_1_0_0; }

		//expressions+=AndExp
		public Assignment getExpressionsAssignment_1_1() { return cExpressionsAssignment_1_1; }

		//AndExp
		public RuleCall getExpressionsAndExpParserRuleCall_1_1_0() { return cExpressionsAndExpParserRuleCall_1_1_0; }
	}

	public class AndExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AndExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpressionsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpressionsBooleanExpParserRuleCall_0_0 = (RuleCall)cExpressionsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOperatorsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cOperatorsANDKeyword_1_0_0 = (Keyword)cOperatorsAssignment_1_0.eContents().get(0);
		private final Assignment cExpressionsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionsBooleanExpParserRuleCall_1_1_0 = (RuleCall)cExpressionsAssignment_1_1.eContents().get(0);
		
		//AndExp:
		//	expressions+=BooleanExp (operators+="AND" expressions+=BooleanExp)*;
		@Override public ParserRule getRule() { return rule; }

		//expressions+=BooleanExp (operators+="AND" expressions+=BooleanExp)*
		public Group getGroup() { return cGroup; }

		//expressions+=BooleanExp
		public Assignment getExpressionsAssignment_0() { return cExpressionsAssignment_0; }

		//BooleanExp
		public RuleCall getExpressionsBooleanExpParserRuleCall_0_0() { return cExpressionsBooleanExpParserRuleCall_0_0; }

		//(operators+="AND" expressions+=BooleanExp)*
		public Group getGroup_1() { return cGroup_1; }

		//operators+="AND"
		public Assignment getOperatorsAssignment_1_0() { return cOperatorsAssignment_1_0; }

		//"AND"
		public Keyword getOperatorsANDKeyword_1_0_0() { return cOperatorsANDKeyword_1_0_0; }

		//expressions+=BooleanExp
		public Assignment getExpressionsAssignment_1_1() { return cExpressionsAssignment_1_1; }

		//BooleanExp
		public RuleCall getExpressionsBooleanExpParserRuleCall_1_1_0() { return cExpressionsBooleanExpParserRuleCall_1_1_0; }
	}

	public class BooleanExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanExp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cNotAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cNotNOTKeyword_0_0_0 = (Keyword)cNotAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Assignment cLeftAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final RuleCall cLeftAttributeOrIntParserRuleCall_0_1_0_0 = (RuleCall)cLeftAssignment_0_1_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final Alternatives cNameAlternatives_0_1_1_0 = (Alternatives)cNameAssignment_0_1_1.eContents().get(0);
		private final Keyword cNameExclamationMarkEqualsSignEqualsSignKeyword_0_1_1_0_0 = (Keyword)cNameAlternatives_0_1_1_0.eContents().get(0);
		private final Keyword cNameEqualsSignEqualsSignEqualsSignKeyword_0_1_1_0_1 = (Keyword)cNameAlternatives_0_1_1_0.eContents().get(1);
		private final Keyword cNameEqualsSignEqualsSignKeyword_0_1_1_0_2 = (Keyword)cNameAlternatives_0_1_1_0.eContents().get(2);
		private final Keyword cNameExclamationMarkEqualsSignKeyword_0_1_1_0_3 = (Keyword)cNameAlternatives_0_1_1_0.eContents().get(3);
		private final Keyword cNameGreaterThanSignKeyword_0_1_1_0_4 = (Keyword)cNameAlternatives_0_1_1_0.eContents().get(4);
		private final Keyword cNameGreaterThanSignEqualsSignKeyword_0_1_1_0_5 = (Keyword)cNameAlternatives_0_1_1_0.eContents().get(5);
		private final Keyword cNameLessThanSignKeyword_0_1_1_0_6 = (Keyword)cNameAlternatives_0_1_1_0.eContents().get(6);
		private final Keyword cNameLessThanSignEqualsSignKeyword_0_1_1_0_7 = (Keyword)cNameAlternatives_0_1_1_0.eContents().get(7);
		private final Assignment cRightAssignment_0_1_2 = (Assignment)cGroup_0_1.eContents().get(2);
		private final RuleCall cRightAttributeOrIntParserRuleCall_0_1_2_0 = (RuleCall)cRightAssignment_0_1_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNestedExpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNestedExpOrExpParserRuleCall_1_1_0 = (RuleCall)cNestedExpAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//BooleanExp:
		//	not="NOT"? (left=AttributeOrInt name=("!==" | "===" | "==" | "!=" | ">" | ">=" | "<" | "<=") right=AttributeOrInt) |
		//	"(" nestedExp=OrExp ")";
		@Override public ParserRule getRule() { return rule; }

		//not="NOT"? (left=AttributeOrInt name=("!==" | "===" | "==" | "!=" | ">" | ">=" | "<" | "<=") right=AttributeOrInt) | "("
		//nestedExp=OrExp ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//not="NOT"? (left=AttributeOrInt name=("!==" | "===" | "==" | "!=" | ">" | ">=" | "<" | "<=") right=AttributeOrInt)
		public Group getGroup_0() { return cGroup_0; }

		//not="NOT"?
		public Assignment getNotAssignment_0_0() { return cNotAssignment_0_0; }

		//"NOT"
		public Keyword getNotNOTKeyword_0_0_0() { return cNotNOTKeyword_0_0_0; }

		//left=AttributeOrInt name=("!==" | "===" | "==" | "!=" | ">" | ">=" | "<" | "<=") right=AttributeOrInt
		public Group getGroup_0_1() { return cGroup_0_1; }

		//left=AttributeOrInt
		public Assignment getLeftAssignment_0_1_0() { return cLeftAssignment_0_1_0; }

		//AttributeOrInt
		public RuleCall getLeftAttributeOrIntParserRuleCall_0_1_0_0() { return cLeftAttributeOrIntParserRuleCall_0_1_0_0; }

		//name=("!==" | "===" | "==" | "!=" | ">" | ">=" | "<" | "<=")
		public Assignment getNameAssignment_0_1_1() { return cNameAssignment_0_1_1; }

		//"!==" | "===" | "==" | "!=" | ">" | ">=" | "<" | "<="
		public Alternatives getNameAlternatives_0_1_1_0() { return cNameAlternatives_0_1_1_0; }

		//"!=="
		public Keyword getNameExclamationMarkEqualsSignEqualsSignKeyword_0_1_1_0_0() { return cNameExclamationMarkEqualsSignEqualsSignKeyword_0_1_1_0_0; }

		//"==="
		public Keyword getNameEqualsSignEqualsSignEqualsSignKeyword_0_1_1_0_1() { return cNameEqualsSignEqualsSignEqualsSignKeyword_0_1_1_0_1; }

		//"=="
		public Keyword getNameEqualsSignEqualsSignKeyword_0_1_1_0_2() { return cNameEqualsSignEqualsSignKeyword_0_1_1_0_2; }

		//"!="
		public Keyword getNameExclamationMarkEqualsSignKeyword_0_1_1_0_3() { return cNameExclamationMarkEqualsSignKeyword_0_1_1_0_3; }

		//">"
		public Keyword getNameGreaterThanSignKeyword_0_1_1_0_4() { return cNameGreaterThanSignKeyword_0_1_1_0_4; }

		//">="
		public Keyword getNameGreaterThanSignEqualsSignKeyword_0_1_1_0_5() { return cNameGreaterThanSignEqualsSignKeyword_0_1_1_0_5; }

		//"<"
		public Keyword getNameLessThanSignKeyword_0_1_1_0_6() { return cNameLessThanSignKeyword_0_1_1_0_6; }

		//"<="
		public Keyword getNameLessThanSignEqualsSignKeyword_0_1_1_0_7() { return cNameLessThanSignEqualsSignKeyword_0_1_1_0_7; }

		//right=AttributeOrInt
		public Assignment getRightAssignment_0_1_2() { return cRightAssignment_0_1_2; }

		//AttributeOrInt
		public RuleCall getRightAttributeOrIntParserRuleCall_0_1_2_0() { return cRightAttributeOrIntParserRuleCall_0_1_2_0; }

		//"(" nestedExp=OrExp ")"
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//nestedExp=OrExp
		public Assignment getNestedExpAssignment_1_1() { return cNestedExpAssignment_1_1; }

		//OrExp
		public RuleCall getNestedExpOrExpParserRuleCall_1_1_0() { return cNestedExpOrExpParserRuleCall_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}

	public class AttributeNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cParentAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cParentIDTerminalRuleCall_1_0_0 = (RuleCall)cParentAssignment_1_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cChildAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cChildAttributeNameParserRuleCall_1_2_0 = (RuleCall)cChildAssignment_1_2.eContents().get(0);
		
		//AttributeName:
		//	name=ID | parent=ID "." child=AttributeName;
		@Override public ParserRule getRule() { return rule; }

		//name=ID | parent=ID "." child=AttributeName
		public Alternatives getAlternatives() { return cAlternatives; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//parent=ID "." child=AttributeName
		public Group getGroup_1() { return cGroup_1; }

		//parent=ID
		public Assignment getParentAssignment_1_0() { return cParentAssignment_1_0; }

		//ID
		public RuleCall getParentIDTerminalRuleCall_1_0_0() { return cParentIDTerminalRuleCall_1_0_0; }

		//"."
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }

		//child=AttributeName
		public Assignment getChildAssignment_1_2() { return cChildAssignment_1_2; }

		//AttributeName
		public RuleCall getChildAttributeNameParserRuleCall_1_2_0() { return cChildAttributeNameParserRuleCall_1_2_0; }
	}

	public class AttributeOrIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeOrInt");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cAttributeAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cAttributeAttributeNameParserRuleCall_0_0 = (RuleCall)cAttributeAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//AttributeOrInt:
		//	attribute=AttributeName | value=INT;
		@Override public ParserRule getRule() { return rule; }

		//attribute=AttributeName | value=INT
		public Alternatives getAlternatives() { return cAlternatives; }

		//attribute=AttributeName
		public Assignment getAttributeAssignment_0() { return cAttributeAssignment_0; }

		//AttributeName
		public RuleCall getAttributeAttributeNameParserRuleCall_0_0() { return cAttributeAttributeNameParserRuleCall_0_0; }

		//value=INT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_1_0() { return cValueINTTerminalRuleCall_1_0; }
	}

	public class GotoConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GotoCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIFKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionOrExpParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cNameGOTOKeyword_2_0 = (Keyword)cNameAssignment_2.eContents().get(0);
		private final Assignment cGotoAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cGotoLabelCrossReference_3_0 = (CrossReference)cGotoAssignment_3.eContents().get(0);
		private final RuleCall cGotoLabelIDTerminalRuleCall_3_0_1 = (RuleCall)cGotoLabelCrossReference_3_0.eContents().get(1);
		
		//GotoCondition:
		//	"IF" condition=OrExp name="GOTO" goto=[Label];
		@Override public ParserRule getRule() { return rule; }

		//"IF" condition=OrExp name="GOTO" goto=[Label]
		public Group getGroup() { return cGroup; }

		//"IF"
		public Keyword getIFKeyword_0() { return cIFKeyword_0; }

		//condition=OrExp
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }

		//OrExp
		public RuleCall getConditionOrExpParserRuleCall_1_0() { return cConditionOrExpParserRuleCall_1_0; }

		//name="GOTO"
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//"GOTO"
		public Keyword getNameGOTOKeyword_2_0() { return cNameGOTOKeyword_2_0; }

		//goto=[Label]
		public Assignment getGotoAssignment_3() { return cGotoAssignment_3; }

		//[Label]
		public CrossReference getGotoLabelCrossReference_3_0() { return cGotoLabelCrossReference_3_0; }

		//ID
		public RuleCall getGotoLabelIDTerminalRuleCall_3_0_1() { return cGotoLabelIDTerminalRuleCall_3_0_1; }
	}

	public class LabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Label");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLABELKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Label:
		//	"LABEL" name=ID;
		@Override public ParserRule getRule() { return rule; }

		//"LABEL" name=ID
		public Group getGroup() { return cGroup; }

		//"LABEL"
		public Keyword getLABELKeyword_0() { return cLABELKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class AdditionExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AdditionExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpressionsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpressionsMultiplicationExpParserRuleCall_0_0 = (RuleCall)cExpressionsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOperatorsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Alternatives cOperatorsAlternatives_1_0_0 = (Alternatives)cOperatorsAssignment_1_0.eContents().get(0);
		private final Keyword cOperatorsPlusSignKeyword_1_0_0_0 = (Keyword)cOperatorsAlternatives_1_0_0.eContents().get(0);
		private final Keyword cOperatorsHyphenMinusKeyword_1_0_0_1 = (Keyword)cOperatorsAlternatives_1_0_0.eContents().get(1);
		private final Assignment cExpressionsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionsMultiplicationExpParserRuleCall_1_1_0 = (RuleCall)cExpressionsAssignment_1_1.eContents().get(0);
		
		////Arithmetic operations and value assignment
		//AdditionExp:
		//	expressions+=MultiplicationExp (operators+=("+" | "-") expressions+=MultiplicationExp)*;
		@Override public ParserRule getRule() { return rule; }

		//expressions+=MultiplicationExp (operators+=("+" | "-") expressions+=MultiplicationExp)*
		public Group getGroup() { return cGroup; }

		//expressions+=MultiplicationExp
		public Assignment getExpressionsAssignment_0() { return cExpressionsAssignment_0; }

		//MultiplicationExp
		public RuleCall getExpressionsMultiplicationExpParserRuleCall_0_0() { return cExpressionsMultiplicationExpParserRuleCall_0_0; }

		//(operators+=("+" | "-") expressions+=MultiplicationExp)*
		public Group getGroup_1() { return cGroup_1; }

		//operators+=("+" | "-")
		public Assignment getOperatorsAssignment_1_0() { return cOperatorsAssignment_1_0; }

		//"+" | "-"
		public Alternatives getOperatorsAlternatives_1_0_0() { return cOperatorsAlternatives_1_0_0; }

		//"+"
		public Keyword getOperatorsPlusSignKeyword_1_0_0_0() { return cOperatorsPlusSignKeyword_1_0_0_0; }

		//"-"
		public Keyword getOperatorsHyphenMinusKeyword_1_0_0_1() { return cOperatorsHyphenMinusKeyword_1_0_0_1; }

		//expressions+=MultiplicationExp
		public Assignment getExpressionsAssignment_1_1() { return cExpressionsAssignment_1_1; }

		//MultiplicationExp
		public RuleCall getExpressionsMultiplicationExpParserRuleCall_1_1_0() { return cExpressionsMultiplicationExpParserRuleCall_1_1_0; }
	}

	public class MultiplicationExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultiplicationExp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cExpressionsAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionsAttributeOrIntParserRuleCall_0_0_0 = (RuleCall)cExpressionsAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Assignment cOperatorsAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final Alternatives cOperatorsAlternatives_0_1_0_0 = (Alternatives)cOperatorsAssignment_0_1_0.eContents().get(0);
		private final Keyword cOperatorsAsteriskKeyword_0_1_0_0_0 = (Keyword)cOperatorsAlternatives_0_1_0_0.eContents().get(0);
		private final Keyword cOperatorsSolidusKeyword_0_1_0_0_1 = (Keyword)cOperatorsAlternatives_0_1_0_0.eContents().get(1);
		private final Assignment cExpressionsAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cExpressionsAttributeOrIntParserRuleCall_0_1_1_0 = (RuleCall)cExpressionsAssignment_0_1_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNestedExpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNestedExpAdditionExpParserRuleCall_1_1_0 = (RuleCall)cNestedExpAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//MultiplicationExp:
		//	expressions+=AttributeOrInt (operators+=("*" | "/") expressions+=AttributeOrInt)* | "(" nestedExp=AdditionExp ")";
		@Override public ParserRule getRule() { return rule; }

		//expressions+=AttributeOrInt (operators+=("*" | "/") expressions+=AttributeOrInt)* | "(" nestedExp=AdditionExp ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//expressions+=AttributeOrInt (operators+=("*" | "/") expressions+=AttributeOrInt)*
		public Group getGroup_0() { return cGroup_0; }

		//expressions+=AttributeOrInt
		public Assignment getExpressionsAssignment_0_0() { return cExpressionsAssignment_0_0; }

		//AttributeOrInt
		public RuleCall getExpressionsAttributeOrIntParserRuleCall_0_0_0() { return cExpressionsAttributeOrIntParserRuleCall_0_0_0; }

		//(operators+=("*" | "/") expressions+=AttributeOrInt)*
		public Group getGroup_0_1() { return cGroup_0_1; }

		//operators+=("*" | "/")
		public Assignment getOperatorsAssignment_0_1_0() { return cOperatorsAssignment_0_1_0; }

		//"*" | "/"
		public Alternatives getOperatorsAlternatives_0_1_0_0() { return cOperatorsAlternatives_0_1_0_0; }

		//"*"
		public Keyword getOperatorsAsteriskKeyword_0_1_0_0_0() { return cOperatorsAsteriskKeyword_0_1_0_0_0; }

		//"/"
		public Keyword getOperatorsSolidusKeyword_0_1_0_0_1() { return cOperatorsSolidusKeyword_0_1_0_0_1; }

		//expressions+=AttributeOrInt
		public Assignment getExpressionsAssignment_0_1_1() { return cExpressionsAssignment_0_1_1; }

		//AttributeOrInt
		public RuleCall getExpressionsAttributeOrIntParserRuleCall_0_1_1_0() { return cExpressionsAttributeOrIntParserRuleCall_0_1_1_0; }

		//"(" nestedExp=AdditionExp ")"
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//nestedExp=AdditionExp
		public Assignment getNestedExpAssignment_1_1() { return cNestedExpAssignment_1_1; }

		//AdditionExp
		public RuleCall getNestedExpAdditionExpParserRuleCall_1_1_0() { return cNestedExpAdditionExpParserRuleCall_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}

	public class ValueAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValueAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameAttributeNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAdditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAdditionAdditionExpParserRuleCall_2_0 = (RuleCall)cAdditionAssignment_2.eContents().get(0);
		
		//ValueAssignment:
		//	name=AttributeName "=" addition=AdditionExp;
		@Override public ParserRule getRule() { return rule; }

		//name=AttributeName "=" addition=AdditionExp
		public Group getGroup() { return cGroup; }

		//name=AttributeName
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//AttributeName
		public RuleCall getNameAttributeNameParserRuleCall_0_0() { return cNameAttributeNameParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//addition=AdditionExp
		public Assignment getAdditionAssignment_2() { return cAdditionAssignment_2; }

		//AdditionExp
		public RuleCall getAdditionAdditionExpParserRuleCall_2_0() { return cAdditionAdditionExpParserRuleCall_2_0; }
	}

	public class SimpleAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAttributeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributeAttributeOrIntParserRuleCall_2_0 = (RuleCall)cAttributeAssignment_2.eContents().get(0);
		
		//SimpleAssignment:
		//	name=ID "=" attribute=AttributeOrInt;
		@Override public ParserRule getRule() { return rule; }

		//name=ID "=" attribute=AttributeOrInt
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//attribute=AttributeOrInt
		public Assignment getAttributeAssignment_2() { return cAttributeAssignment_2; }

		//AttributeOrInt
		public RuleCall getAttributeAttributeOrIntParserRuleCall_2_0() { return cAttributeAttributeOrIntParserRuleCall_2_0; }
	}
	
	
	private final ModelElements pModel;
	private final PlayerElements pPlayer;
	private final BoardElements pBoard;
	private final RulesElements pRules;
	private final TurnRulesElements pTurnRules;
	private final TokenElements pToken;
	private final FieldElements pField;
	private final ActionElements pAction;
	private final OrExpElements pOrExp;
	private final AndExpElements pAndExp;
	private final BooleanExpElements pBooleanExp;
	private final AttributeNameElements pAttributeName;
	private final AttributeOrIntElements pAttributeOrInt;
	private final GotoConditionElements pGotoCondition;
	private final LabelElements pLabel;
	private final AdditionExpElements pAdditionExp;
	private final MultiplicationExpElements pMultiplicationExp;
	private final ValueAssignmentElements pValueAssignment;
	private final SimpleAssignmentElements pSimpleAssignment;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public BGLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pPlayer = new PlayerElements();
		this.pBoard = new BoardElements();
		this.pRules = new RulesElements();
		this.pTurnRules = new TurnRulesElements();
		this.pToken = new TokenElements();
		this.pField = new FieldElements();
		this.pAction = new ActionElements();
		this.pOrExp = new OrExpElements();
		this.pAndExp = new AndExpElements();
		this.pBooleanExp = new BooleanExpElements();
		this.pAttributeName = new AttributeNameElements();
		this.pAttributeOrInt = new AttributeOrIntElements();
		this.pGotoCondition = new GotoConditionElements();
		this.pLabel = new LabelElements();
		this.pAdditionExp = new AdditionExpElements();
		this.pMultiplicationExp = new MultiplicationExpElements();
		this.pValueAssignment = new ValueAssignmentElements();
		this.pSimpleAssignment = new SimpleAssignmentElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("hu.bme.aut.gergelyszaz.BGL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	"GAME" name=ID player=Player & board=Board & tokens+=Token* & rules=Rules;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Player:
	//	name="PLAYERS" playercount=INT "{" variables+=SimpleAssignment* "}";
	public PlayerElements getPlayerAccess() {
		return pPlayer;
	}
	
	public ParserRule getPlayerRule() {
		return getPlayerAccess().getRule();
	}

	//Board:
	//	name="BOARD" "{" variables+=SimpleAssignment* fields+=Field* "}";
	public BoardElements getBoardAccess() {
		return pBoard;
	}
	
	public ParserRule getBoardRule() {
		return getBoardAccess().getRule();
	}

	//Rules:
	//	name="RULES" "{" turnrules=TurnRules "}";
	public RulesElements getRulesAccess() {
		return pRules;
	}
	
	public ParserRule getRulesRule() {
		return getRulesAccess().getRule();
	}

	//TurnRules:
	//	name="TURN" "{" actions+=Action* "}";
	public TurnRulesElements getTurnRulesAccess() {
		return pTurnRules;
	}
	
	public ParserRule getTurnRulesRule() {
		return getTurnRulesAccess().getRule();
	}

	//Token:
	//	"TOKEN" name=ID "{" variables+=SimpleAssignment* "}";
	public TokenElements getTokenAccess() {
		return pToken;
	}
	
	public ParserRule getTokenRule() {
		return getTokenAccess().getRule();
	}

	//Field:
	//	name=ID "(" x=INT "," y=INT "," z=INT ")" "{" neighbours+=[Field]* variables+=SimpleAssignment* "}";
	public FieldElements getFieldAccess() {
		return pField;
	}
	
	public ParserRule getFieldRule() {
		return getFieldAccess().getRule();
	}

	//Action:
	//	name="SPAWN" token=[Token] | name="MOVE" | name="DESTROY" | name="SELECT" objectOfSelect=("TOKEN" | "FIELD") "WHERE"
	//	filter=OrExp | assignment=ValueAssignment | gotoCondition=GotoCondition | label=Label;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}

	////Part for writing condition
	//OrExp:
	//	expressions+=AndExp (operators+="OR" expressions+=AndExp)*;
	public OrExpElements getOrExpAccess() {
		return pOrExp;
	}
	
	public ParserRule getOrExpRule() {
		return getOrExpAccess().getRule();
	}

	//AndExp:
	//	expressions+=BooleanExp (operators+="AND" expressions+=BooleanExp)*;
	public AndExpElements getAndExpAccess() {
		return pAndExp;
	}
	
	public ParserRule getAndExpRule() {
		return getAndExpAccess().getRule();
	}

	//BooleanExp:
	//	not="NOT"? (left=AttributeOrInt name=("!==" | "===" | "==" | "!=" | ">" | ">=" | "<" | "<=") right=AttributeOrInt) |
	//	"(" nestedExp=OrExp ")";
	public BooleanExpElements getBooleanExpAccess() {
		return pBooleanExp;
	}
	
	public ParserRule getBooleanExpRule() {
		return getBooleanExpAccess().getRule();
	}

	//AttributeName:
	//	name=ID | parent=ID "." child=AttributeName;
	public AttributeNameElements getAttributeNameAccess() {
		return pAttributeName;
	}
	
	public ParserRule getAttributeNameRule() {
		return getAttributeNameAccess().getRule();
	}

	//AttributeOrInt:
	//	attribute=AttributeName | value=INT;
	public AttributeOrIntElements getAttributeOrIntAccess() {
		return pAttributeOrInt;
	}
	
	public ParserRule getAttributeOrIntRule() {
		return getAttributeOrIntAccess().getRule();
	}

	//GotoCondition:
	//	"IF" condition=OrExp name="GOTO" goto=[Label];
	public GotoConditionElements getGotoConditionAccess() {
		return pGotoCondition;
	}
	
	public ParserRule getGotoConditionRule() {
		return getGotoConditionAccess().getRule();
	}

	//Label:
	//	"LABEL" name=ID;
	public LabelElements getLabelAccess() {
		return pLabel;
	}
	
	public ParserRule getLabelRule() {
		return getLabelAccess().getRule();
	}

	////Arithmetic operations and value assignment
	//AdditionExp:
	//	expressions+=MultiplicationExp (operators+=("+" | "-") expressions+=MultiplicationExp)*;
	public AdditionExpElements getAdditionExpAccess() {
		return pAdditionExp;
	}
	
	public ParserRule getAdditionExpRule() {
		return getAdditionExpAccess().getRule();
	}

	//MultiplicationExp:
	//	expressions+=AttributeOrInt (operators+=("*" | "/") expressions+=AttributeOrInt)* | "(" nestedExp=AdditionExp ")";
	public MultiplicationExpElements getMultiplicationExpAccess() {
		return pMultiplicationExp;
	}
	
	public ParserRule getMultiplicationExpRule() {
		return getMultiplicationExpAccess().getRule();
	}

	//ValueAssignment:
	//	name=AttributeName "=" addition=AdditionExp;
	public ValueAssignmentElements getValueAssignmentAccess() {
		return pValueAssignment;
	}
	
	public ParserRule getValueAssignmentRule() {
		return getValueAssignmentAccess().getRule();
	}

	//SimpleAssignment:
	//	name=ID "=" attribute=AttributeOrInt;
	public SimpleAssignmentElements getSimpleAssignmentAccess() {
		return pSimpleAssignment;
	}
	
	public ParserRule getSimpleAssignmentRule() {
		return getSimpleAssignmentAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
