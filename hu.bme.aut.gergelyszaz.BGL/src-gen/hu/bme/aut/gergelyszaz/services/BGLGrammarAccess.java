/*
* generated by Xtext
*/
package hu.bme.aut.gergelyszaz.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class BGLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cUnorderedGroup.eContents().get(0);
		private final Keyword cGameKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Assignment cPlayerAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cPlayerPlayerParserRuleCall_0_2_0 = (RuleCall)cPlayerAssignment_0_2.eContents().get(0);
		private final Assignment cBoardAssignment_1 = (Assignment)cUnorderedGroup.eContents().get(1);
		private final RuleCall cBoardBoardParserRuleCall_1_0 = (RuleCall)cBoardAssignment_1.eContents().get(0);
		private final Assignment cTokensAssignment_2 = (Assignment)cUnorderedGroup.eContents().get(2);
		private final RuleCall cTokensTokensParserRuleCall_2_0 = (RuleCall)cTokensAssignment_2.eContents().get(0);
		
		//Model:
		//	"Game" name=ID player=Player & board=Board & tokens=Tokens?;
		public ParserRule getRule() { return rule; }

		//"Game" name=ID player=Player & board=Board & tokens=Tokens?
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }

		//"Game" name=ID player=Player
		public Group getGroup_0() { return cGroup_0; }

		//"Game"
		public Keyword getGameKeyword_0_0() { return cGameKeyword_0_0; }

		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }

		//player=Player
		public Assignment getPlayerAssignment_0_2() { return cPlayerAssignment_0_2; }

		//Player
		public RuleCall getPlayerPlayerParserRuleCall_0_2_0() { return cPlayerPlayerParserRuleCall_0_2_0; }

		//board=Board
		public Assignment getBoardAssignment_1() { return cBoardAssignment_1; }

		//Board
		public RuleCall getBoardBoardParserRuleCall_1_0() { return cBoardBoardParserRuleCall_1_0; }

		//tokens=Tokens?
		public Assignment getTokensAssignment_2() { return cTokensAssignment_2; }

		//Tokens
		public RuleCall getTokensTokensParserRuleCall_2_0() { return cTokensTokensParserRuleCall_2_0; }
	}

	public class PlayerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Player");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNamePlayersKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cPlayercountAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPlayercountINTTerminalRuleCall_1_0 = (RuleCall)cPlayercountAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAttributesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAttributesAttributeParserRuleCall_2_1_0 = (RuleCall)cAttributesAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//Player:
		//	name="Players" playercount=INT ("{" attributes+=Attribute* "}")?;
		public ParserRule getRule() { return rule; }

		//name="Players" playercount=INT ("{" attributes+=Attribute* "}")?
		public Group getGroup() { return cGroup; }

		//name="Players"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"Players"
		public Keyword getNamePlayersKeyword_0_0() { return cNamePlayersKeyword_0_0; }

		//playercount=INT
		public Assignment getPlayercountAssignment_1() { return cPlayercountAssignment_1; }

		//INT
		public RuleCall getPlayercountINTTerminalRuleCall_1_0() { return cPlayercountINTTerminalRuleCall_1_0; }

		//("{" attributes+=Attribute* "}")?
		public Group getGroup_2() { return cGroup_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }

		//attributes+=Attribute*
		public Assignment getAttributesAssignment_2_1() { return cAttributesAssignment_2_1; }

		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_2_1_0() { return cAttributesAttributeParserRuleCall_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }
	}

	public class BoardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Board");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cUnorderedGroup.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cNameBoardKeyword_0_0_0 = (Keyword)cNameAssignment_0_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cFieldsAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cFieldsFieldParserRuleCall_0_2_0 = (RuleCall)cFieldsAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cUnorderedGroup.eContents().get(1);
		private final Assignment cAttributesAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cAttributesAttributeParserRuleCall_1_0_0 = (RuleCall)cAttributesAssignment_1_0.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//Board:
		//	name="Board" "{" fields+=Field* & attributes+=Attribute* "}";
		public ParserRule getRule() { return rule; }

		//name="Board" "{" fields+=Field* & attributes+=Attribute* "}"
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }

		//name="Board" "{" fields+=Field*
		public Group getGroup_0() { return cGroup_0; }

		//name="Board"
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }

		//"Board"
		public Keyword getNameBoardKeyword_0_0_0() { return cNameBoardKeyword_0_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0_1() { return cLeftCurlyBracketKeyword_0_1; }

		//fields+=Field*
		public Assignment getFieldsAssignment_0_2() { return cFieldsAssignment_0_2; }

		//Field
		public RuleCall getFieldsFieldParserRuleCall_0_2_0() { return cFieldsFieldParserRuleCall_0_2_0; }

		//attributes+=Attribute* "}"
		public Group getGroup_1() { return cGroup_1; }

		//attributes+=Attribute*
		public Assignment getAttributesAssignment_1_0() { return cAttributesAssignment_1_0; }

		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_1_0_0() { return cAttributesAttributeParserRuleCall_1_0_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_1() { return cRightCurlyBracketKeyword_1_1; }
	}

	public class TokensElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Tokens");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameTokensKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTokentypesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTokentypesTokenTypeParserRuleCall_2_0 = (RuleCall)cTokentypesAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Tokens:
		//	name="Tokens" "{" tokentypes+=TokenType* "}";
		public ParserRule getRule() { return rule; }

		//name="Tokens" "{" tokentypes+=TokenType* "}"
		public Group getGroup() { return cGroup; }

		//name="Tokens"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"Tokens"
		public Keyword getNameTokensKeyword_0_0() { return cNameTokensKeyword_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//tokentypes+=TokenType*
		public Assignment getTokentypesAssignment_2() { return cTokentypesAssignment_2; }

		//TokenType
		public RuleCall getTokentypesTokenTypeParserRuleCall_2_0() { return cTokentypesTokenTypeParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class TokenTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TokenType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cVariablesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariablesVariableParserRuleCall_1_0 = (RuleCall)cVariablesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAttributesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAttributesAttributeParserRuleCall_2_1_0 = (RuleCall)cAttributesAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//TokenType:
		//	name=ID variables+=Variable* ("{" attributes+=Attribute* "}")?;
		public ParserRule getRule() { return rule; }

		//name=ID variables+=Variable* ("{" attributes+=Attribute* "}")?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//variables+=Variable*
		public Assignment getVariablesAssignment_1() { return cVariablesAssignment_1; }

		//Variable
		public RuleCall getVariablesVariableParserRuleCall_1_0() { return cVariablesVariableParserRuleCall_1_0; }

		//("{" attributes+=Attribute* "}")?
		public Group getGroup_2() { return cGroup_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }

		//attributes+=Attribute*
		public Assignment getAttributesAssignment_2_1() { return cAttributesAssignment_2_1; }

		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_2_1_0() { return cAttributesAttributeParserRuleCall_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }
	}

	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Attribute:
		//	name=ID ";";
		public ParserRule getRule() { return rule; }

		//name=ID ";"
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class FieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Field");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cXAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cXINTTerminalRuleCall_2_0 = (RuleCall)cXAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cYAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cYINTTerminalRuleCall_4_0 = (RuleCall)cYAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cZAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cZINTTerminalRuleCall_6_0 = (RuleCall)cZAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cColonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cNeighboursAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final CrossReference cNeighboursFieldCrossReference_9_0 = (CrossReference)cNeighboursAssignment_9.eContents().get(0);
		private final RuleCall cNeighboursFieldIDTerminalRuleCall_9_0_1 = (RuleCall)cNeighboursFieldCrossReference_9_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//Field:
		//	name=ID "(" x=INT "," y=INT "," z=INT ")" ":" neighbours+=[Field]* ";";
		public ParserRule getRule() { return rule; }

		//name=ID "(" x=INT "," y=INT "," z=INT ")" ":" neighbours+=[Field]* ";"
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//x=INT
		public Assignment getXAssignment_2() { return cXAssignment_2; }

		//INT
		public RuleCall getXINTTerminalRuleCall_2_0() { return cXINTTerminalRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//y=INT
		public Assignment getYAssignment_4() { return cYAssignment_4; }

		//INT
		public RuleCall getYINTTerminalRuleCall_4_0() { return cYINTTerminalRuleCall_4_0; }

		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//z=INT
		public Assignment getZAssignment_6() { return cZAssignment_6; }

		//INT
		public RuleCall getZINTTerminalRuleCall_6_0() { return cZINTTerminalRuleCall_6_0; }

		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }

		//":"
		public Keyword getColonKeyword_8() { return cColonKeyword_8; }

		//neighbours+=[Field]*
		public Assignment getNeighboursAssignment_9() { return cNeighboursAssignment_9; }

		//[Field]
		public CrossReference getNeighboursFieldCrossReference_9_0() { return cNeighboursFieldCrossReference_9_0; }

		//ID
		public RuleCall getNeighboursFieldIDTerminalRuleCall_9_0_1() { return cNeighboursFieldIDTerminalRuleCall_9_0_1; }

		//";"
		public Keyword getSemicolonKeyword_10() { return cSemicolonKeyword_10; }
	}

	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Action");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cNameSpawnKeyword_0_0_0 = (Keyword)cNameAssignment_0_0.eContents().get(0);
		private final Assignment cTokenAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cTokenTokenTypeCrossReference_0_1_0 = (CrossReference)cTokenAssignment_0_1.eContents().get(0);
		private final RuleCall cTokenTokenTypeIDTerminalRuleCall_0_1_0_1 = (RuleCall)cTokenTokenTypeCrossReference_0_1_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cNameMoveKeyword_1_0_0 = (Keyword)cNameAssignment_1_0.eContents().get(0);
		private final Assignment cFieldAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cFieldFieldCrossReference_1_1_0 = (CrossReference)cFieldAssignment_1_1.eContents().get(0);
		private final RuleCall cFieldFieldIDTerminalRuleCall_1_1_0_1 = (RuleCall)cFieldFieldCrossReference_1_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cNameAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cNameRollKeyword_2_0_0 = (Keyword)cNameAssignment_2_0.eContents().get(0);
		private final Assignment cFromAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cFromINTTerminalRuleCall_2_1_0 = (RuleCall)cFromAssignment_2_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cToAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cToINTTerminalRuleCall_2_3_0 = (RuleCall)cToAssignment_2_3.eContents().get(0);
		
		//Action:
		//	name="Spawn" token=[TokenType] | name="Move" field=[Field] | name="Roll" from=INT "-" to=INT;
		public ParserRule getRule() { return rule; }

		//name="Spawn" token=[TokenType] | name="Move" field=[Field] | name="Roll" from=INT "-" to=INT
		public Alternatives getAlternatives() { return cAlternatives; }

		//name="Spawn" token=[TokenType]
		public Group getGroup_0() { return cGroup_0; }

		//name="Spawn"
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }

		//"Spawn"
		public Keyword getNameSpawnKeyword_0_0_0() { return cNameSpawnKeyword_0_0_0; }

		//token=[TokenType]
		public Assignment getTokenAssignment_0_1() { return cTokenAssignment_0_1; }

		//[TokenType]
		public CrossReference getTokenTokenTypeCrossReference_0_1_0() { return cTokenTokenTypeCrossReference_0_1_0; }

		//ID
		public RuleCall getTokenTokenTypeIDTerminalRuleCall_0_1_0_1() { return cTokenTokenTypeIDTerminalRuleCall_0_1_0_1; }

		//name="Move" field=[Field]
		public Group getGroup_1() { return cGroup_1; }

		//name="Move"
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }

		//"Move"
		public Keyword getNameMoveKeyword_1_0_0() { return cNameMoveKeyword_1_0_0; }

		//field=[Field]
		public Assignment getFieldAssignment_1_1() { return cFieldAssignment_1_1; }

		//[Field]
		public CrossReference getFieldFieldCrossReference_1_1_0() { return cFieldFieldCrossReference_1_1_0; }

		//ID
		public RuleCall getFieldFieldIDTerminalRuleCall_1_1_0_1() { return cFieldFieldIDTerminalRuleCall_1_1_0_1; }

		//name="Roll" from=INT "-" to=INT
		public Group getGroup_2() { return cGroup_2; }

		//name="Roll"
		public Assignment getNameAssignment_2_0() { return cNameAssignment_2_0; }

		//"Roll"
		public Keyword getNameRollKeyword_2_0_0() { return cNameRollKeyword_2_0_0; }

		//from=INT
		public Assignment getFromAssignment_2_1() { return cFromAssignment_2_1; }

		//INT
		public RuleCall getFromINTTerminalRuleCall_2_1_0() { return cFromINTTerminalRuleCall_2_1_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_2_2() { return cHyphenMinusKeyword_2_2; }

		//to=INT
		public Assignment getToAssignment_2_3() { return cToAssignment_2_3; }

		//INT
		public RuleCall getToINTTerminalRuleCall_2_3_0() { return cToINTTerminalRuleCall_2_3_0; }
	}

	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		////Arithmetics
		//Variable:
		//	name=ID "=" expression=Expression;
		public ParserRule getRule() { return rule; }

		//name=ID "=" expression=Expression
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final RuleCall cBooleanExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expression:
		//	BooleanExpression;
		public ParserRule getRule() { return rule; }

		//BooleanExpression
		public RuleCall getBooleanExpressionParserRuleCall() { return cBooleanExpressionParserRuleCall; }
	}

	public class BooleanExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cComparisonParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cAndOrExpressionLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0_1_0 = (Alternatives)cOpAssignment_1_0_1.eContents().get(0);
		private final Keyword cOpVerticalLineVerticalLineKeyword_1_0_1_0_0 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(0);
		private final Keyword cOpAmpersandAmpersandKeyword_1_0_1_0_1 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightComparisonParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//BooleanExpression returns Expression:
		//	Comparison (({AndOrExpression.left=current} op=("||" | "&&")) right=Comparison)*;
		public ParserRule getRule() { return rule; }

		//Comparison (({AndOrExpression.left=current} op=("||" | "&&")) right=Comparison)*
		public Group getGroup() { return cGroup; }

		//Comparison
		public RuleCall getComparisonParserRuleCall_0() { return cComparisonParserRuleCall_0; }

		//(({AndOrExpression.left=current} op=("||" | "&&")) right=Comparison)*
		public Group getGroup_1() { return cGroup_1; }

		//{AndOrExpression.left=current} op=("||" | "&&")
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{AndOrExpression.left=current}
		public Action getAndOrExpressionLeftAction_1_0_0() { return cAndOrExpressionLeftAction_1_0_0; }

		//op=("||" | "&&")
		public Assignment getOpAssignment_1_0_1() { return cOpAssignment_1_0_1; }

		//"||" | "&&"
		public Alternatives getOpAlternatives_1_0_1_0() { return cOpAlternatives_1_0_1_0; }

		//"||"
		public Keyword getOpVerticalLineVerticalLineKeyword_1_0_1_0_0() { return cOpVerticalLineVerticalLineKeyword_1_0_1_0_0; }

		//"&&"
		public Keyword getOpAmpersandAmpersandKeyword_1_0_1_0_1() { return cOpAmpersandAmpersandKeyword_1_0_1_0_1; }

		//right=Comparison
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//Comparison
		public RuleCall getRightComparisonParserRuleCall_1_1_0() { return cRightComparisonParserRuleCall_1_1_0; }
	}

	public class ComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Comparison");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqualsParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cComparisonLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Keyword cOpLessThanSignKeyword_1_0_1_0 = (Keyword)cOpAssignment_1_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightEqualsParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Comparison returns Expression:
		//	Equals (({Comparison.left=current} op="<") right=Equals)*;
		public ParserRule getRule() { return rule; }

		//Equals (({Comparison.left=current} op="<") right=Equals)*
		public Group getGroup() { return cGroup; }

		//Equals
		public RuleCall getEqualsParserRuleCall_0() { return cEqualsParserRuleCall_0; }

		//(({Comparison.left=current} op="<") right=Equals)*
		public Group getGroup_1() { return cGroup_1; }

		//{Comparison.left=current} op="<"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{Comparison.left=current}
		public Action getComparisonLeftAction_1_0_0() { return cComparisonLeftAction_1_0_0; }

		//op="<"
		public Assignment getOpAssignment_1_0_1() { return cOpAssignment_1_0_1; }

		//"<"
		public Keyword getOpLessThanSignKeyword_1_0_1_0() { return cOpLessThanSignKeyword_1_0_1_0; }

		//right=Equals
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//Equals
		public RuleCall getRightEqualsParserRuleCall_1_1_0() { return cRightEqualsParserRuleCall_1_1_0; }
	}

	public class EqualsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Equals");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAdditionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cEqualsLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Keyword cOpEqualsSignEqualsSignKeyword_1_0_1_0 = (Keyword)cOpAssignment_1_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightAdditionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Equals returns Expression:
		//	Addition (({Equals.left=current} op="==") right=Addition)*;
		public ParserRule getRule() { return rule; }

		//Addition (({Equals.left=current} op="==") right=Addition)*
		public Group getGroup() { return cGroup; }

		//Addition
		public RuleCall getAdditionParserRuleCall_0() { return cAdditionParserRuleCall_0; }

		//(({Equals.left=current} op="==") right=Addition)*
		public Group getGroup_1() { return cGroup_1; }

		//{Equals.left=current} op="=="
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{Equals.left=current}
		public Action getEqualsLeftAction_1_0_0() { return cEqualsLeftAction_1_0_0; }

		//op="=="
		public Assignment getOpAssignment_1_0_1() { return cOpAssignment_1_0_1; }

		//"=="
		public Keyword getOpEqualsSignEqualsSignKeyword_1_0_1_0() { return cOpEqualsSignEqualsSignKeyword_1_0_1_0; }

		//right=Addition
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//Addition
		public RuleCall getRightAdditionParserRuleCall_1_1_0() { return cRightAdditionParserRuleCall_1_1_0; }
	}

	public class AdditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Addition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cPlusLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cMinusLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMultiplicationParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Addition returns Expression:
		//	Multiplication (({Plus.left=current} "+" | {Minus.left=current} "-") right=Multiplication)*;
		public ParserRule getRule() { return rule; }

		//Multiplication (({Plus.left=current} "+" | {Minus.left=current} "-") right=Multiplication)*
		public Group getGroup() { return cGroup; }

		//Multiplication
		public RuleCall getMultiplicationParserRuleCall_0() { return cMultiplicationParserRuleCall_0; }

		//(({Plus.left=current} "+" | {Minus.left=current} "-") right=Multiplication)*
		public Group getGroup_1() { return cGroup_1; }

		//{Plus.left=current} "+" | {Minus.left=current} "-"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{Plus.left=current} "+"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Plus.left=current}
		public Action getPlusLeftAction_1_0_0_0() { return cPlusLeftAction_1_0_0_0; }

		//"+"
		public Keyword getPlusSignKeyword_1_0_0_1() { return cPlusSignKeyword_1_0_0_1; }

		//{Minus.left=current} "-"
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{Minus.left=current}
		public Action getMinusLeftAction_1_0_1_0() { return cMinusLeftAction_1_0_1_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_0_1_1() { return cHyphenMinusKeyword_1_0_1_1; }

		//right=Multiplication
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//Multiplication
		public RuleCall getRightMultiplicationParserRuleCall_1_1_0() { return cRightMultiplicationParserRuleCall_1_1_0; }
	}

	public class MultiplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Multiplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrefixedParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cMultiOrDivLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0_1_0 = (Alternatives)cOpAssignment_1_0_1.eContents().get(0);
		private final Keyword cOpAsteriskKeyword_1_0_1_0_0 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(0);
		private final Keyword cOpSolidusKeyword_1_0_1_0_1 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightPrefixedParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Multiplication returns Expression:
		//	Prefixed (({MultiOrDiv.left=current} op=("*" | "/")) right=Prefixed)*;
		public ParserRule getRule() { return rule; }

		//Prefixed (({MultiOrDiv.left=current} op=("*" | "/")) right=Prefixed)*
		public Group getGroup() { return cGroup; }

		//Prefixed
		public RuleCall getPrefixedParserRuleCall_0() { return cPrefixedParserRuleCall_0; }

		//(({MultiOrDiv.left=current} op=("*" | "/")) right=Prefixed)*
		public Group getGroup_1() { return cGroup_1; }

		//{MultiOrDiv.left=current} op=("*" | "/")
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{MultiOrDiv.left=current}
		public Action getMultiOrDivLeftAction_1_0_0() { return cMultiOrDivLeftAction_1_0_0; }

		//op=("*" | "/")
		public Assignment getOpAssignment_1_0_1() { return cOpAssignment_1_0_1; }

		//"*" | "/"
		public Alternatives getOpAlternatives_1_0_1_0() { return cOpAlternatives_1_0_1_0; }

		//"*"
		public Keyword getOpAsteriskKeyword_1_0_1_0_0() { return cOpAsteriskKeyword_1_0_1_0_0; }

		//"/"
		public Keyword getOpSolidusKeyword_1_0_1_0_1() { return cOpSolidusKeyword_1_0_1_0_1; }

		//right=Prefixed
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//Prefixed
		public RuleCall getRightPrefixedParserRuleCall_1_1_0() { return cRightPrefixedParserRuleCall_1_1_0; }
	}

	public class PrefixedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Prefixed");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cBooleanNegationAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cExpressionAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cExpressionAtomicParserRuleCall_0_2_0 = (RuleCall)cExpressionAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cArithmeticSignedAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionAtomicParserRuleCall_1_2_0 = (RuleCall)cExpressionAssignment_1_2.eContents().get(0);
		private final RuleCall cAtomicParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Prefixed returns Expression:
		//	{BooleanNegation} => "!" expression=Atomic / * right associativity * / / * right associativity * / | {ArithmeticSigned}
		//	=> "-" expression=Atomic | Atomic;
		public ParserRule getRule() { return rule; }

		//{BooleanNegation} => "!" expression=Atomic / * right associativity * / / * right associativity * / | {ArithmeticSigned} =>
		//"-" expression=Atomic | Atomic
		public Alternatives getAlternatives() { return cAlternatives; }

		//{BooleanNegation} => "!" expression=Atomic
		public Group getGroup_0() { return cGroup_0; }

		//{BooleanNegation}
		public Action getBooleanNegationAction_0_0() { return cBooleanNegationAction_0_0; }

		//=> "!"
		public Keyword getExclamationMarkKeyword_0_1() { return cExclamationMarkKeyword_0_1; }

		//expression=Atomic
		public Assignment getExpressionAssignment_0_2() { return cExpressionAssignment_0_2; }

		//Atomic
		public RuleCall getExpressionAtomicParserRuleCall_0_2_0() { return cExpressionAtomicParserRuleCall_0_2_0; }

		//{ArithmeticSigned} => "-" expression=Atomic
		public Group getGroup_1() { return cGroup_1; }

		//{ArithmeticSigned}
		public Action getArithmeticSignedAction_1_0() { return cArithmeticSignedAction_1_0; }

		//=> "-"
		public Keyword getHyphenMinusKeyword_1_1() { return cHyphenMinusKeyword_1_1; }

		//expression=Atomic
		public Assignment getExpressionAssignment_1_2() { return cExpressionAssignment_1_2; }

		//Atomic
		public RuleCall getExpressionAtomicParserRuleCall_1_2_0() { return cExpressionAtomicParserRuleCall_1_2_0; }

		//Atomic
		public RuleCall getAtomicParserRuleCall_2() { return cAtomicParserRuleCall_2; }
	}

	public class AtomicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Atomic");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cNumberLiteralAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cStringLiteralAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cBooleanLiteralAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final Alternatives cValueAlternatives_3_1_0 = (Alternatives)cValueAssignment_3_1.eContents().get(0);
		private final Keyword cValueTrueKeyword_3_1_0_0 = (Keyword)cValueAlternatives_3_1_0.eContents().get(0);
		private final Keyword cValueFalseKeyword_3_1_0_1 = (Keyword)cValueAlternatives_3_1_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cVariableReferenceAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cRefAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cRefVariableCrossReference_4_1_0 = (CrossReference)cRefAssignment_4_1.eContents().get(0);
		private final RuleCall cRefVariableIDTerminalRuleCall_4_1_0_1 = (RuleCall)cRefVariableCrossReference_4_1_0.eContents().get(1);
		
		//Atomic returns Expression:
		//	"(" Expression ")" | {NumberLiteral} value=INT | {StringLiteral} value=STRING | {BooleanLiteral} value=("true" |
		//	"false") | {VariableReference} ref=[Variable];
		public ParserRule getRule() { return rule; }

		//"(" Expression ")" | {NumberLiteral} value=INT | {StringLiteral} value=STRING | {BooleanLiteral} value=("true" |
		//"false") | {VariableReference} ref=[Variable]
		public Alternatives getAlternatives() { return cAlternatives; }

		//"(" Expression ")"
		public Group getGroup_0() { return cGroup_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_0_1() { return cExpressionParserRuleCall_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }

		//{NumberLiteral} value=INT
		public Group getGroup_1() { return cGroup_1; }

		//{NumberLiteral}
		public Action getNumberLiteralAction_1_0() { return cNumberLiteralAction_1_0; }

		//value=INT
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_1_1_0() { return cValueINTTerminalRuleCall_1_1_0; }

		//{StringLiteral} value=STRING
		public Group getGroup_2() { return cGroup_2; }

		//{StringLiteral}
		public Action getStringLiteralAction_2_0() { return cStringLiteralAction_2_0; }

		//value=STRING
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_1_0() { return cValueSTRINGTerminalRuleCall_2_1_0; }

		//{BooleanLiteral} value=("true" | "false")
		public Group getGroup_3() { return cGroup_3; }

		//{BooleanLiteral}
		public Action getBooleanLiteralAction_3_0() { return cBooleanLiteralAction_3_0; }

		//value=("true" | "false")
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }

		//"true" | "false"
		public Alternatives getValueAlternatives_3_1_0() { return cValueAlternatives_3_1_0; }

		//"true"
		public Keyword getValueTrueKeyword_3_1_0_0() { return cValueTrueKeyword_3_1_0_0; }

		//"false"
		public Keyword getValueFalseKeyword_3_1_0_1() { return cValueFalseKeyword_3_1_0_1; }

		//{VariableReference} ref=[Variable]
		public Group getGroup_4() { return cGroup_4; }

		//{VariableReference}
		public Action getVariableReferenceAction_4_0() { return cVariableReferenceAction_4_0; }

		//ref=[Variable]
		public Assignment getRefAssignment_4_1() { return cRefAssignment_4_1; }

		//[Variable]
		public CrossReference getRefVariableCrossReference_4_1_0() { return cRefVariableCrossReference_4_1_0; }

		//ID
		public RuleCall getRefVariableIDTerminalRuleCall_4_1_0_1() { return cRefVariableIDTerminalRuleCall_4_1_0_1; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIntTypeAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cIntKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cStringTypeAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cStringKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cBooleanTypeAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cBooleanKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		
		//// the types will be used only internally by the type system
		//Type:
		//	{IntType} "int" | {StringType} "string" | {BooleanType} "boolean";
		public ParserRule getRule() { return rule; }

		//{IntType} "int" | {StringType} "string" | {BooleanType} "boolean"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{IntType} "int"
		public Group getGroup_0() { return cGroup_0; }

		//{IntType}
		public Action getIntTypeAction_0_0() { return cIntTypeAction_0_0; }

		//"int"
		public Keyword getIntKeyword_0_1() { return cIntKeyword_0_1; }

		//{StringType} "string"
		public Group getGroup_1() { return cGroup_1; }

		//{StringType}
		public Action getStringTypeAction_1_0() { return cStringTypeAction_1_0; }

		//"string"
		public Keyword getStringKeyword_1_1() { return cStringKeyword_1_1; }

		//{BooleanType} "boolean"
		public Group getGroup_2() { return cGroup_2; }

		//{BooleanType}
		public Action getBooleanTypeAction_2_0() { return cBooleanTypeAction_2_0; }

		//"boolean"
		public Keyword getBooleanKeyword_2_1() { return cBooleanKeyword_2_1; }
	}
	
	
	private final ModelElements pModel;
	private final PlayerElements pPlayer;
	private final BoardElements pBoard;
	private final TokensElements pTokens;
	private final TokenTypeElements pTokenType;
	private final AttributeElements pAttribute;
	private final FieldElements pField;
	private final ActionElements pAction;
	private final VariableElements pVariable;
	private final ExpressionElements pExpression;
	private final BooleanExpressionElements pBooleanExpression;
	private final ComparisonElements pComparison;
	private final EqualsElements pEquals;
	private final AdditionElements pAddition;
	private final MultiplicationElements pMultiplication;
	private final PrefixedElements pPrefixed;
	private final AtomicElements pAtomic;
	private final TypeElements pType;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public BGLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pPlayer = new PlayerElements();
		this.pBoard = new BoardElements();
		this.pTokens = new TokensElements();
		this.pTokenType = new TokenTypeElements();
		this.pAttribute = new AttributeElements();
		this.pField = new FieldElements();
		this.pAction = new ActionElements();
		this.pVariable = new VariableElements();
		this.pExpression = new ExpressionElements();
		this.pBooleanExpression = new BooleanExpressionElements();
		this.pComparison = new ComparisonElements();
		this.pEquals = new EqualsElements();
		this.pAddition = new AdditionElements();
		this.pMultiplication = new MultiplicationElements();
		this.pPrefixed = new PrefixedElements();
		this.pAtomic = new AtomicElements();
		this.pType = new TypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("hu.bme.aut.gergelyszaz.BGL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	"Game" name=ID player=Player & board=Board & tokens=Tokens?;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Player:
	//	name="Players" playercount=INT ("{" attributes+=Attribute* "}")?;
	public PlayerElements getPlayerAccess() {
		return pPlayer;
	}
	
	public ParserRule getPlayerRule() {
		return getPlayerAccess().getRule();
	}

	//Board:
	//	name="Board" "{" fields+=Field* & attributes+=Attribute* "}";
	public BoardElements getBoardAccess() {
		return pBoard;
	}
	
	public ParserRule getBoardRule() {
		return getBoardAccess().getRule();
	}

	//Tokens:
	//	name="Tokens" "{" tokentypes+=TokenType* "}";
	public TokensElements getTokensAccess() {
		return pTokens;
	}
	
	public ParserRule getTokensRule() {
		return getTokensAccess().getRule();
	}

	//TokenType:
	//	name=ID variables+=Variable* ("{" attributes+=Attribute* "}")?;
	public TokenTypeElements getTokenTypeAccess() {
		return pTokenType;
	}
	
	public ParserRule getTokenTypeRule() {
		return getTokenTypeAccess().getRule();
	}

	//Attribute:
	//	name=ID ";";
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}

	//Field:
	//	name=ID "(" x=INT "," y=INT "," z=INT ")" ":" neighbours+=[Field]* ";";
	public FieldElements getFieldAccess() {
		return pField;
	}
	
	public ParserRule getFieldRule() {
		return getFieldAccess().getRule();
	}

	//Action:
	//	name="Spawn" token=[TokenType] | name="Move" field=[Field] | name="Roll" from=INT "-" to=INT;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}

	////Arithmetics
	//Variable:
	//	name=ID "=" expression=Expression;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}

	//Expression:
	//	BooleanExpression;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//BooleanExpression returns Expression:
	//	Comparison (({AndOrExpression.left=current} op=("||" | "&&")) right=Comparison)*;
	public BooleanExpressionElements getBooleanExpressionAccess() {
		return pBooleanExpression;
	}
	
	public ParserRule getBooleanExpressionRule() {
		return getBooleanExpressionAccess().getRule();
	}

	//Comparison returns Expression:
	//	Equals (({Comparison.left=current} op="<") right=Equals)*;
	public ComparisonElements getComparisonAccess() {
		return pComparison;
	}
	
	public ParserRule getComparisonRule() {
		return getComparisonAccess().getRule();
	}

	//Equals returns Expression:
	//	Addition (({Equals.left=current} op="==") right=Addition)*;
	public EqualsElements getEqualsAccess() {
		return pEquals;
	}
	
	public ParserRule getEqualsRule() {
		return getEqualsAccess().getRule();
	}

	//Addition returns Expression:
	//	Multiplication (({Plus.left=current} "+" | {Minus.left=current} "-") right=Multiplication)*;
	public AdditionElements getAdditionAccess() {
		return pAddition;
	}
	
	public ParserRule getAdditionRule() {
		return getAdditionAccess().getRule();
	}

	//Multiplication returns Expression:
	//	Prefixed (({MultiOrDiv.left=current} op=("*" | "/")) right=Prefixed)*;
	public MultiplicationElements getMultiplicationAccess() {
		return pMultiplication;
	}
	
	public ParserRule getMultiplicationRule() {
		return getMultiplicationAccess().getRule();
	}

	//Prefixed returns Expression:
	//	{BooleanNegation} => "!" expression=Atomic / * right associativity * / / * right associativity * / | {ArithmeticSigned}
	//	=> "-" expression=Atomic | Atomic;
	public PrefixedElements getPrefixedAccess() {
		return pPrefixed;
	}
	
	public ParserRule getPrefixedRule() {
		return getPrefixedAccess().getRule();
	}

	//Atomic returns Expression:
	//	"(" Expression ")" | {NumberLiteral} value=INT | {StringLiteral} value=STRING | {BooleanLiteral} value=("true" |
	//	"false") | {VariableReference} ref=[Variable];
	public AtomicElements getAtomicAccess() {
		return pAtomic;
	}
	
	public ParserRule getAtomicRule() {
		return getAtomicAccess().getRule();
	}

	//// the types will be used only internally by the type system
	//Type:
	//	{IntType} "int" | {StringType} "string" | {BooleanType} "boolean";
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
