/*
 * generated by Xtext
 */
package hu.bme.aut.gergelyszaz.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class BGLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cUnorderedGroup.eContents().get(0);
		private final Keyword cGameKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Assignment cPlayerAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cPlayerPlayerParserRuleCall_0_2_0 = (RuleCall)cPlayerAssignment_0_2.eContents().get(0);
		private final Assignment cBoardAssignment_1 = (Assignment)cUnorderedGroup.eContents().get(1);
		private final RuleCall cBoardBoardParserRuleCall_1_0 = (RuleCall)cBoardAssignment_1.eContents().get(0);
		private final Assignment cTokensAssignment_2 = (Assignment)cUnorderedGroup.eContents().get(2);
		private final RuleCall cTokensTokenParserRuleCall_2_0 = (RuleCall)cTokensAssignment_2.eContents().get(0);
		private final Assignment cRulesAssignment_3 = (Assignment)cUnorderedGroup.eContents().get(3);
		private final RuleCall cRulesRulesParserRuleCall_3_0 = (RuleCall)cRulesAssignment_3.eContents().get(0);
		
		//Model:
		//	"Game" name=ID player=Player & board=Board & tokens+=Token* & rules=Rules;
		@Override public ParserRule getRule() { return rule; }

		//"Game" name=ID player=Player & board=Board & tokens+=Token* & rules=Rules
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }

		//"Game" name=ID player=Player
		public Group getGroup_0() { return cGroup_0; }

		//"Game"
		public Keyword getGameKeyword_0_0() { return cGameKeyword_0_0; }

		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }

		//player=Player
		public Assignment getPlayerAssignment_0_2() { return cPlayerAssignment_0_2; }

		//Player
		public RuleCall getPlayerPlayerParserRuleCall_0_2_0() { return cPlayerPlayerParserRuleCall_0_2_0; }

		//board=Board
		public Assignment getBoardAssignment_1() { return cBoardAssignment_1; }

		//Board
		public RuleCall getBoardBoardParserRuleCall_1_0() { return cBoardBoardParserRuleCall_1_0; }

		//tokens+=Token*
		public Assignment getTokensAssignment_2() { return cTokensAssignment_2; }

		//Token
		public RuleCall getTokensTokenParserRuleCall_2_0() { return cTokensTokenParserRuleCall_2_0; }

		//rules=Rules
		public Assignment getRulesAssignment_3() { return cRulesAssignment_3; }

		//Rules
		public RuleCall getRulesRulesParserRuleCall_3_0() { return cRulesRulesParserRuleCall_3_0; }
	}

	public class PlayerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Player");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNamePlayersKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cPlayercountAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPlayercountINTTerminalRuleCall_1_0 = (RuleCall)cPlayercountAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAttributesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAttributesVariableParserRuleCall_2_1_0 = (RuleCall)cAttributesAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//Player:
		//	name="Players" playercount=INT ("{" attributes+=Variable* "}")?;
		@Override public ParserRule getRule() { return rule; }

		//name="Players" playercount=INT ("{" attributes+=Variable* "}")?
		public Group getGroup() { return cGroup; }

		//name="Players"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"Players"
		public Keyword getNamePlayersKeyword_0_0() { return cNamePlayersKeyword_0_0; }

		//playercount=INT
		public Assignment getPlayercountAssignment_1() { return cPlayercountAssignment_1; }

		//INT
		public RuleCall getPlayercountINTTerminalRuleCall_1_0() { return cPlayercountINTTerminalRuleCall_1_0; }

		//("{" attributes+=Variable* "}")?
		public Group getGroup_2() { return cGroup_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }

		//attributes+=Variable*
		public Assignment getAttributesAssignment_2_1() { return cAttributesAssignment_2_1; }

		//Variable
		public RuleCall getAttributesVariableParserRuleCall_2_1_0() { return cAttributesVariableParserRuleCall_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }
	}

	public class BoardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Board");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cUnorderedGroup.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cNameBoardKeyword_0_0_0 = (Keyword)cNameAssignment_0_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cFieldsAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cFieldsFieldParserRuleCall_0_2_0 = (RuleCall)cFieldsAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cUnorderedGroup.eContents().get(1);
		private final Assignment cAttributesAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cAttributesVariableParserRuleCall_1_0_0 = (RuleCall)cAttributesAssignment_1_0.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//Board:
		//	name="Board" "{" fields+=Field* & attributes+=Variable* "}";
		@Override public ParserRule getRule() { return rule; }

		//name="Board" "{" fields+=Field* & attributes+=Variable* "}"
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }

		//name="Board" "{" fields+=Field*
		public Group getGroup_0() { return cGroup_0; }

		//name="Board"
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }

		//"Board"
		public Keyword getNameBoardKeyword_0_0_0() { return cNameBoardKeyword_0_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0_1() { return cLeftCurlyBracketKeyword_0_1; }

		//fields+=Field*
		public Assignment getFieldsAssignment_0_2() { return cFieldsAssignment_0_2; }

		//Field
		public RuleCall getFieldsFieldParserRuleCall_0_2_0() { return cFieldsFieldParserRuleCall_0_2_0; }

		//attributes+=Variable* "}"
		public Group getGroup_1() { return cGroup_1; }

		//attributes+=Variable*
		public Assignment getAttributesAssignment_1_0() { return cAttributesAssignment_1_0; }

		//Variable
		public RuleCall getAttributesVariableParserRuleCall_1_0_0() { return cAttributesVariableParserRuleCall_1_0_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_1() { return cRightCurlyBracketKeyword_1_1; }
	}

	public class RulesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Rules");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameRulesKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTurnrulesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTurnrulesTurnRulesParserRuleCall_2_0 = (RuleCall)cTurnrulesAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Rules:
		//	name="Rules" "{" turnrules=TurnRules "}";
		@Override public ParserRule getRule() { return rule; }

		//name="Rules" "{" turnrules=TurnRules "}"
		public Group getGroup() { return cGroup; }

		//name="Rules"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"Rules"
		public Keyword getNameRulesKeyword_0_0() { return cNameRulesKeyword_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//turnrules=TurnRules
		public Assignment getTurnrulesAssignment_2() { return cTurnrulesAssignment_2; }

		//TurnRules
		public RuleCall getTurnrulesTurnRulesParserRuleCall_2_0() { return cTurnrulesTurnRulesParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class TurnRulesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TurnRules");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameTurnKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cActionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cActionsActionParserRuleCall_2_0 = (RuleCall)cActionsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//TurnRules:
		//	name="Turn" "{" actions+=Action* "}";
		@Override public ParserRule getRule() { return rule; }

		//name="Turn" "{" actions+=Action* "}"
		public Group getGroup() { return cGroup; }

		//name="Turn"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"Turn"
		public Keyword getNameTurnKeyword_0_0() { return cNameTurnKeyword_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//actions+=Action*
		public Assignment getActionsAssignment_2() { return cActionsAssignment_2; }

		//Action
		public RuleCall getActionsActionParserRuleCall_2_0() { return cActionsActionParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class TokenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Token");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTokenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Token:
		//	"Token" name=ID "{" "}";
		@Override public ParserRule getRule() { return rule; }

		//"Token" name=ID "{" "}"
		public Group getGroup() { return cGroup; }

		//"Token"
		public Keyword getTokenKeyword_0() { return cTokenKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class FieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Field");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cXAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cXINTTerminalRuleCall_2_0 = (RuleCall)cXAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cYAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cYINTTerminalRuleCall_4_0 = (RuleCall)cYAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cZAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cZINTTerminalRuleCall_6_0 = (RuleCall)cZAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cColonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cNeighboursAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final CrossReference cNeighboursFieldCrossReference_9_0 = (CrossReference)cNeighboursAssignment_9.eContents().get(0);
		private final RuleCall cNeighboursFieldIDTerminalRuleCall_9_0_1 = (RuleCall)cNeighboursFieldCrossReference_9_0.eContents().get(1);
		private final Assignment cVariablesAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cVariablesVariableParserRuleCall_10_0 = (RuleCall)cVariablesAssignment_10.eContents().get(0);
		private final Keyword cSemicolonKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//Field:
		//	name=ID "(" x=INT "," y=INT "," z=INT ")" ":" neighbours+=[Field]* variables+=Variable* ";";
		@Override public ParserRule getRule() { return rule; }

		//name=ID "(" x=INT "," y=INT "," z=INT ")" ":" neighbours+=[Field]* variables+=Variable* ";"
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//x=INT
		public Assignment getXAssignment_2() { return cXAssignment_2; }

		//INT
		public RuleCall getXINTTerminalRuleCall_2_0() { return cXINTTerminalRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//y=INT
		public Assignment getYAssignment_4() { return cYAssignment_4; }

		//INT
		public RuleCall getYINTTerminalRuleCall_4_0() { return cYINTTerminalRuleCall_4_0; }

		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//z=INT
		public Assignment getZAssignment_6() { return cZAssignment_6; }

		//INT
		public RuleCall getZINTTerminalRuleCall_6_0() { return cZINTTerminalRuleCall_6_0; }

		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }

		//":"
		public Keyword getColonKeyword_8() { return cColonKeyword_8; }

		//neighbours+=[Field]*
		public Assignment getNeighboursAssignment_9() { return cNeighboursAssignment_9; }

		//[Field]
		public CrossReference getNeighboursFieldCrossReference_9_0() { return cNeighboursFieldCrossReference_9_0; }

		//ID
		public RuleCall getNeighboursFieldIDTerminalRuleCall_9_0_1() { return cNeighboursFieldIDTerminalRuleCall_9_0_1; }

		//variables+=Variable*
		public Assignment getVariablesAssignment_10() { return cVariablesAssignment_10; }

		//Variable
		public RuleCall getVariablesVariableParserRuleCall_10_0() { return cVariablesVariableParserRuleCall_10_0; }

		//";"
		public Keyword getSemicolonKeyword_11() { return cSemicolonKeyword_11; }
	}

	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Action");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cNameSpawnKeyword_0_0_0 = (Keyword)cNameAssignment_0_0.eContents().get(0);
		private final Assignment cTokenAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cTokenTokenCrossReference_0_1_0 = (CrossReference)cTokenAssignment_0_1.eContents().get(0);
		private final RuleCall cTokenTokenIDTerminalRuleCall_0_1_0_1 = (RuleCall)cTokenTokenCrossReference_0_1_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cNameMoveKeyword_1_0 = (Keyword)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cNameAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cNameSelectKeyword_2_0_0 = (Keyword)cNameAssignment_2_0.eContents().get(0);
		private final Assignment cObjectOfSelectAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Alternatives cObjectOfSelectAlternatives_2_1_0 = (Alternatives)cObjectOfSelectAssignment_2_1.eContents().get(0);
		private final Keyword cObjectOfSelectTokenKeyword_2_1_0_0 = (Keyword)cObjectOfSelectAlternatives_2_1_0.eContents().get(0);
		private final Keyword cObjectOfSelectFieldKeyword_2_1_0_1 = (Keyword)cObjectOfSelectAlternatives_2_1_0.eContents().get(1);
		
		//Action:
		//	name="Spawn" token=[Token] | name="Move" | name="Select" objectOfSelect=("token" | "field");
		@Override public ParserRule getRule() { return rule; }

		//name="Spawn" token=[Token] | name="Move" | name="Select" objectOfSelect=("token" | "field")
		public Alternatives getAlternatives() { return cAlternatives; }

		//name="Spawn" token=[Token]
		public Group getGroup_0() { return cGroup_0; }

		//name="Spawn"
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }

		//"Spawn"
		public Keyword getNameSpawnKeyword_0_0_0() { return cNameSpawnKeyword_0_0_0; }

		//token=[Token]
		public Assignment getTokenAssignment_0_1() { return cTokenAssignment_0_1; }

		//[Token]
		public CrossReference getTokenTokenCrossReference_0_1_0() { return cTokenTokenCrossReference_0_1_0; }

		//ID
		public RuleCall getTokenTokenIDTerminalRuleCall_0_1_0_1() { return cTokenTokenIDTerminalRuleCall_0_1_0_1; }

		//name="Move"
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//"Move"
		public Keyword getNameMoveKeyword_1_0() { return cNameMoveKeyword_1_0; }

		//name="Select" objectOfSelect=("token" | "field")
		public Group getGroup_2() { return cGroup_2; }

		//name="Select"
		public Assignment getNameAssignment_2_0() { return cNameAssignment_2_0; }

		//"Select"
		public Keyword getNameSelectKeyword_2_0_0() { return cNameSelectKeyword_2_0_0; }

		//objectOfSelect=("token" | "field")
		public Assignment getObjectOfSelectAssignment_2_1() { return cObjectOfSelectAssignment_2_1; }

		//"token" | "field"
		public Alternatives getObjectOfSelectAlternatives_2_1_0() { return cObjectOfSelectAlternatives_2_1_0; }

		//"token"
		public Keyword getObjectOfSelectTokenKeyword_2_1_0_0() { return cObjectOfSelectTokenKeyword_2_1_0_0; }

		//"field"
		public Keyword getObjectOfSelectFieldKeyword_2_1_0_1() { return cObjectOfSelectFieldKeyword_2_1_0_1; }
	}

	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueINTTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Variable:
		//	name=ID "=" value=INT;
		@Override public ParserRule getRule() { return rule; }

		//name=ID "=" value=INT
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=INT
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_2_0() { return cValueINTTerminalRuleCall_2_0; }
	}

	public class ReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Reference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cValueVariableCrossReference_2_0 = (CrossReference)cValueAssignment_2.eContents().get(0);
		private final RuleCall cValueVariableIDTerminalRuleCall_2_0_1 = (RuleCall)cValueVariableCrossReference_2_0.eContents().get(1);
		
		//Reference:
		//	name=ID "=" value=[Variable];
		@Override public ParserRule getRule() { return rule; }

		//name=ID "=" value=[Variable]
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=[Variable]
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//[Variable]
		public CrossReference getValueVariableCrossReference_2_0() { return cValueVariableCrossReference_2_0; }

		//ID
		public RuleCall getValueVariableIDTerminalRuleCall_2_0_1() { return cValueVariableIDTerminalRuleCall_2_0_1; }
	}
	
	
	private final ModelElements pModel;
	private final PlayerElements pPlayer;
	private final BoardElements pBoard;
	private final RulesElements pRules;
	private final TurnRulesElements pTurnRules;
	private final TokenElements pToken;
	private final FieldElements pField;
	private final ActionElements pAction;
	private final VariableElements pVariable;
	private final ReferenceElements pReference;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public BGLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pPlayer = new PlayerElements();
		this.pBoard = new BoardElements();
		this.pRules = new RulesElements();
		this.pTurnRules = new TurnRulesElements();
		this.pToken = new TokenElements();
		this.pField = new FieldElements();
		this.pAction = new ActionElements();
		this.pVariable = new VariableElements();
		this.pReference = new ReferenceElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("hu.bme.aut.gergelyszaz.BGL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	"Game" name=ID player=Player & board=Board & tokens+=Token* & rules=Rules;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Player:
	//	name="Players" playercount=INT ("{" attributes+=Variable* "}")?;
	public PlayerElements getPlayerAccess() {
		return pPlayer;
	}
	
	public ParserRule getPlayerRule() {
		return getPlayerAccess().getRule();
	}

	//Board:
	//	name="Board" "{" fields+=Field* & attributes+=Variable* "}";
	public BoardElements getBoardAccess() {
		return pBoard;
	}
	
	public ParserRule getBoardRule() {
		return getBoardAccess().getRule();
	}

	//Rules:
	//	name="Rules" "{" turnrules=TurnRules "}";
	public RulesElements getRulesAccess() {
		return pRules;
	}
	
	public ParserRule getRulesRule() {
		return getRulesAccess().getRule();
	}

	//TurnRules:
	//	name="Turn" "{" actions+=Action* "}";
	public TurnRulesElements getTurnRulesAccess() {
		return pTurnRules;
	}
	
	public ParserRule getTurnRulesRule() {
		return getTurnRulesAccess().getRule();
	}

	//Token:
	//	"Token" name=ID "{" "}";
	public TokenElements getTokenAccess() {
		return pToken;
	}
	
	public ParserRule getTokenRule() {
		return getTokenAccess().getRule();
	}

	//Field:
	//	name=ID "(" x=INT "," y=INT "," z=INT ")" ":" neighbours+=[Field]* variables+=Variable* ";";
	public FieldElements getFieldAccess() {
		return pField;
	}
	
	public ParserRule getFieldRule() {
		return getFieldAccess().getRule();
	}

	//Action:
	//	name="Spawn" token=[Token] | name="Move" | name="Select" objectOfSelect=("token" | "field");
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}

	//Variable:
	//	name=ID "=" value=INT;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}

	//Reference:
	//	name=ID "=" value=[Variable];
	public ReferenceElements getReferenceAccess() {
		return pReference;
	}
	
	public ParserRule getReferenceRule() {
		return getReferenceAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
