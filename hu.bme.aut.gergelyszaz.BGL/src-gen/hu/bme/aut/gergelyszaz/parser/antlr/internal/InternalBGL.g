/*
 * generated by Xtext
 */
grammar InternalBGL;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package hu.bme.aut.gergelyszaz.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package hu.bme.aut.gergelyszaz.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import hu.bme.aut.gergelyszaz.services.BGLGrammarAccess;

}

@parser::members {

 	private BGLGrammarAccess grammarAccess;
 	
    public InternalBGLParser(TokenStream input, BGLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected BGLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(

(
	{ 
	  getUnorderedGroupHelper().enter(grammarAccess.getModelAccess().getUnorderedGroup());
	}
	(
		(

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getModelAccess().getUnorderedGroup(), 0)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getModelAccess().getUnorderedGroup(), 0);
	 				}
					({true}?=>(	otherlv_1='GAME' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getModelAccess().getGAMEKeyword_0_0());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getModelAccess().getNameIDTerminalRuleCall_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getModelRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getPlayerPlayerParserRuleCall_0_2_0()); 
	    }
		lv_player_3_0=rulePlayer		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"player",
        		lv_player_3_0, 
        		"Player");
	        afterParserOrEnumRuleCall();
	    }

)
)))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getModelAccess().getUnorderedGroup());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getModelAccess().getUnorderedGroup(), 1)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getModelAccess().getUnorderedGroup(), 1);
	 				}
					({true}?=>(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getBoardBoardParserRuleCall_1_0()); 
	    }
		lv_board_4_0=ruleBoard		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"board",
        		lv_board_4_0, 
        		"Board");
	        afterParserOrEnumRuleCall();
	    }

)
))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getModelAccess().getUnorderedGroup());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getModelAccess().getUnorderedGroup(), 2)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getModelAccess().getUnorderedGroup(), 2);
	 				}
					({true}?=>(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getTokensTokenParserRuleCall_2_0()); 
	    }
		lv_tokens_5_0=ruleToken		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"tokens",
        		lv_tokens_5_0, 
        		"Token");
	        afterParserOrEnumRuleCall();
	    }

)
))+
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getModelAccess().getUnorderedGroup());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getModelAccess().getUnorderedGroup(), 3)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getModelAccess().getUnorderedGroup(), 3);
	 				}
					({true}?=>(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getRulesRulesParserRuleCall_3_0()); 
	    }
		lv_rules_6_0=ruleRules		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"rules",
        		lv_rules_6_0, 
        		"Rules");
	        afterParserOrEnumRuleCall();
	    }

)
))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getModelAccess().getUnorderedGroup());
	 				}
 				)
			)  

		)+
	  	{getUnorderedGroupHelper().canLeave(grammarAccess.getModelAccess().getUnorderedGroup())}?	
	)
)
	{ 
	  getUnorderedGroupHelper().leave(grammarAccess.getModelAccess().getUnorderedGroup());
	}

)
;





// Entry rule entryRulePlayer
entryRulePlayer returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPlayerRule()); }
	 iv_rulePlayer=rulePlayer 
	 { $current=$iv_rulePlayer.current; } 
	 EOF 
;

// Rule Player
rulePlayer returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=	'PLAYERS' 
    {
        newLeafNode(lv_name_0_0, grammarAccess.getPlayerAccess().getNamePLAYERSKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPlayerRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_0, "PLAYERS");
	    }

)
)(
(
		lv_playercount_1_0=RULE_INT
		{
			newLeafNode(lv_playercount_1_0, grammarAccess.getPlayerAccess().getPlayercountINTTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPlayerRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"playercount",
        		lv_playercount_1_0, 
        		"INT");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPlayerAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPlayerAccess().getVariablesSimpleAssignmentParserRuleCall_3_0()); 
	    }
		lv_variables_3_0=ruleSimpleAssignment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPlayerRule());
	        }
       		add(
       			$current, 
       			"variables",
        		lv_variables_3_0, 
        		"SimpleAssignment");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getPlayerAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleBoard
entryRuleBoard returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBoardRule()); }
	 iv_ruleBoard=ruleBoard 
	 { $current=$iv_ruleBoard.current; } 
	 EOF 
;

// Rule Board
ruleBoard returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=	'BOARD' 
    {
        newLeafNode(lv_name_0_0, grammarAccess.getBoardAccess().getNameBOARDKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBoardRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_0, "BOARD");
	    }

)
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBoardAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBoardAccess().getVariablesSimpleAssignmentParserRuleCall_2_0()); 
	    }
		lv_variables_2_0=ruleSimpleAssignment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBoardRule());
	        }
       		add(
       			$current, 
       			"variables",
        		lv_variables_2_0, 
        		"SimpleAssignment");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getBoardAccess().getFieldsFieldParserRuleCall_3_0()); 
	    }
		lv_fields_3_0=ruleField		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBoardRule());
	        }
       		add(
       			$current, 
       			"fields",
        		lv_fields_3_0, 
        		"Field");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getBoardAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleRules
entryRuleRules returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRulesRule()); }
	 iv_ruleRules=ruleRules 
	 { $current=$iv_ruleRules.current; } 
	 EOF 
;

// Rule Rules
ruleRules returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=	'RULES' 
    {
        newLeafNode(lv_name_0_0, grammarAccess.getRulesAccess().getNameRULESKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRulesRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_0, "RULES");
	    }

)
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRulesAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRulesAccess().getTurnrulesTurnRulesParserRuleCall_2_0()); 
	    }
		lv_turnrules_2_0=ruleTurnRules		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRulesRule());
	        }
       		set(
       			$current, 
       			"turnrules",
        		lv_turnrules_2_0, 
        		"TurnRules");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getRulesAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleTurnRules
entryRuleTurnRules returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTurnRulesRule()); }
	 iv_ruleTurnRules=ruleTurnRules 
	 { $current=$iv_ruleTurnRules.current; } 
	 EOF 
;

// Rule TurnRules
ruleTurnRules returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=	'TURN' 
    {
        newLeafNode(lv_name_0_0, grammarAccess.getTurnRulesAccess().getNameTURNKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTurnRulesRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_0, "TURN");
	    }

)
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTurnRulesAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTurnRulesAccess().getActionsActionParserRuleCall_2_0()); 
	    }
		lv_actions_2_0=ruleAction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTurnRulesRule());
	        }
       		add(
       			$current, 
       			"actions",
        		lv_actions_2_0, 
        		"Action");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTurnRulesAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleToken
entryRuleToken returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTokenRule()); }
	 iv_ruleToken=ruleToken 
	 { $current=$iv_ruleToken.current; } 
	 EOF 
;

// Rule Token
ruleToken returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='TOKEN' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTokenAccess().getTOKENKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getTokenAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTokenRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTokenAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTokenAccess().getVariablesSimpleAssignmentParserRuleCall_3_0()); 
	    }
		lv_variables_3_0=ruleSimpleAssignment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTokenRule());
	        }
       		add(
       			$current, 
       			"variables",
        		lv_variables_3_0, 
        		"SimpleAssignment");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTokenAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleField
entryRuleField returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFieldRule()); }
	 iv_ruleField=ruleField 
	 { $current=$iv_ruleField.current; } 
	 EOF 
;

// Rule Field
ruleField returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getFieldAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFieldRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFieldAccess().getLeftParenthesisKeyword_1());
    }
(
(
		lv_x_2_0=RULE_INT
		{
			newLeafNode(lv_x_2_0, grammarAccess.getFieldAccess().getXINTTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFieldRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"x",
        		lv_x_2_0, 
        		"INT");
	    }

)
)	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFieldAccess().getCommaKeyword_3());
    }
(
(
		lv_y_4_0=RULE_INT
		{
			newLeafNode(lv_y_4_0, grammarAccess.getFieldAccess().getYINTTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFieldRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"y",
        		lv_y_4_0, 
        		"INT");
	    }

)
)	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFieldAccess().getCommaKeyword_5());
    }
(
(
		lv_z_6_0=RULE_INT
		{
			newLeafNode(lv_z_6_0, grammarAccess.getFieldAccess().getZINTTerminalRuleCall_6_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFieldRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"z",
        		lv_z_6_0, 
        		"INT");
	    }

)
)	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getFieldAccess().getRightParenthesisKeyword_7());
    }
	otherlv_8='{' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getFieldAccess().getLeftCurlyBracketKeyword_8());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFieldRule());
	        }
        }
	otherlv_9=RULE_ID
	{
		newLeafNode(otherlv_9, grammarAccess.getFieldAccess().getNeighboursFieldCrossReference_9_0()); 
	}

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getFieldAccess().getVariablesSimpleAssignmentParserRuleCall_10_0()); 
	    }
		lv_variables_10_0=ruleSimpleAssignment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFieldRule());
	        }
       		add(
       			$current, 
       			"variables",
        		lv_variables_10_0, 
        		"SimpleAssignment");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_11='}' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getFieldAccess().getRightCurlyBracketKeyword_11());
    }
)
;





// Entry rule entryRuleAction
entryRuleAction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getActionRule()); }
	 iv_ruleAction=ruleAction 
	 { $current=$iv_ruleAction.current; } 
	 EOF 
;

// Rule Action
ruleAction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		lv_name_0_0=	'SPAWN' 
    {
        newLeafNode(lv_name_0_0, grammarAccess.getActionAccess().getNameSPAWNKeyword_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getActionRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_0, "SPAWN");
	    }

)
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getActionRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getActionAccess().getTokenTokenCrossReference_0_1_0()); 
	}

)
))
    |(
(
		lv_name_2_0=	'MOVE' 
    {
        newLeafNode(lv_name_2_0, grammarAccess.getActionAccess().getNameMOVEKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getActionRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_2_0, "MOVE");
	    }

)
)
    |(
(
		lv_name_3_0=	'DESTROY' 
    {
        newLeafNode(lv_name_3_0, grammarAccess.getActionAccess().getNameDESTROYKeyword_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getActionRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_3_0, "DESTROY");
	    }

)
)
    |((
(
		lv_name_4_0=	'SELECT' 
    {
        newLeafNode(lv_name_4_0, grammarAccess.getActionAccess().getNameSELECTKeyword_3_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getActionRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_4_0, "SELECT");
	    }

)
)(
(
(
		lv_objectOfSelect_5_1=	'TOKEN' 
    {
        newLeafNode(lv_objectOfSelect_5_1, grammarAccess.getActionAccess().getObjectOfSelectTOKENKeyword_3_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getActionRule());
	        }
       		setWithLastConsumed($current, "objectOfSelect", lv_objectOfSelect_5_1, null);
	    }

    |		lv_objectOfSelect_5_2=	'FIELD' 
    {
        newLeafNode(lv_objectOfSelect_5_2, grammarAccess.getActionAccess().getObjectOfSelectFIELDKeyword_3_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getActionRule());
	        }
       		setWithLastConsumed($current, "objectOfSelect", lv_objectOfSelect_5_2, null);
	    }

)

)
)	otherlv_6='WHERE' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getActionAccess().getWHEREKeyword_3_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getActionAccess().getFilterOrExpParserRuleCall_3_3_0()); 
	    }
		lv_filter_7_0=ruleOrExp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActionRule());
	        }
       		set(
       			$current, 
       			"filter",
        		lv_filter_7_0, 
        		"OrExp");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getActionAccess().getAssignmentValueAssignmentParserRuleCall_4_0()); 
	    }
		lv_assignment_8_0=ruleValueAssignment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActionRule());
	        }
       		set(
       			$current, 
       			"assignment",
        		lv_assignment_8_0, 
        		"ValueAssignment");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getActionAccess().getGotoConditionGotoConditionParserRuleCall_5_0()); 
	    }
		lv_gotoCondition_9_0=ruleGotoCondition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActionRule());
	        }
       		set(
       			$current, 
       			"gotoCondition",
        		lv_gotoCondition_9_0, 
        		"GotoCondition");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getActionAccess().getLabelLabelParserRuleCall_6_0()); 
	    }
		lv_label_10_0=ruleLabel		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActionRule());
	        }
       		set(
       			$current, 
       			"label",
        		lv_label_10_0, 
        		"Label");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleOrExp
entryRuleOrExp returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOrExpRule()); }
	 iv_ruleOrExp=ruleOrExp 
	 { $current=$iv_ruleOrExp.current; } 
	 EOF 
;

// Rule OrExp
ruleOrExp returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getOrExpAccess().getExpressionsAndExpParserRuleCall_0_0()); 
	    }
		lv_expressions_0_0=ruleAndExp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrExpRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_0_0, 
        		"AndExp");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		lv_operators_1_0=	'OR' 
    {
        newLeafNode(lv_operators_1_0, grammarAccess.getOrExpAccess().getOperatorsORKeyword_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOrExpRule());
	        }
       		addWithLastConsumed($current, "operators", lv_operators_1_0, "OR");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getOrExpAccess().getExpressionsAndExpParserRuleCall_1_1_0()); 
	    }
		lv_expressions_2_0=ruleAndExp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrExpRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_2_0, 
        		"AndExp");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAndExp
entryRuleAndExp returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAndExpRule()); }
	 iv_ruleAndExp=ruleAndExp 
	 { $current=$iv_ruleAndExp.current; } 
	 EOF 
;

// Rule AndExp
ruleAndExp returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAndExpAccess().getExpressionsBooleanExpParserRuleCall_0_0()); 
	    }
		lv_expressions_0_0=ruleBooleanExp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAndExpRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_0_0, 
        		"BooleanExp");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		lv_operators_1_0=	'AND' 
    {
        newLeafNode(lv_operators_1_0, grammarAccess.getAndExpAccess().getOperatorsANDKeyword_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAndExpRule());
	        }
       		addWithLastConsumed($current, "operators", lv_operators_1_0, "AND");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAndExpAccess().getExpressionsBooleanExpParserRuleCall_1_1_0()); 
	    }
		lv_expressions_2_0=ruleBooleanExp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAndExpRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_2_0, 
        		"BooleanExp");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleBooleanExp
entryRuleBooleanExp returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBooleanExpRule()); }
	 iv_ruleBooleanExp=ruleBooleanExp 
	 { $current=$iv_ruleBooleanExp.current; } 
	 EOF 
;

// Rule BooleanExp
ruleBooleanExp returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		lv_not_0_0=	'NOT' 
    {
        newLeafNode(lv_not_0_0, grammarAccess.getBooleanExpAccess().getNotNOTKeyword_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBooleanExpRule());
	        }
       		setWithLastConsumed($current, "not", lv_not_0_0, "NOT");
	    }

)
)?((
(
		{ 
	        newCompositeNode(grammarAccess.getBooleanExpAccess().getLeftAttributeOrIntParserRuleCall_0_1_0_0()); 
	    }
		lv_left_1_0=ruleAttributeOrInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBooleanExpRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_1_0, 
        		"AttributeOrInt");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
(
		lv_name_2_1=	'!==' 
    {
        newLeafNode(lv_name_2_1, grammarAccess.getBooleanExpAccess().getNameExclamationMarkEqualsSignEqualsSignKeyword_0_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBooleanExpRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_2_1, null);
	    }

    |		lv_name_2_2=	'===' 
    {
        newLeafNode(lv_name_2_2, grammarAccess.getBooleanExpAccess().getNameEqualsSignEqualsSignEqualsSignKeyword_0_1_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBooleanExpRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_2_2, null);
	    }

    |		lv_name_2_3=	'==' 
    {
        newLeafNode(lv_name_2_3, grammarAccess.getBooleanExpAccess().getNameEqualsSignEqualsSignKeyword_0_1_1_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBooleanExpRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_2_3, null);
	    }

    |		lv_name_2_4=	'!=' 
    {
        newLeafNode(lv_name_2_4, grammarAccess.getBooleanExpAccess().getNameExclamationMarkEqualsSignKeyword_0_1_1_0_3());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBooleanExpRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_2_4, null);
	    }

    |		lv_name_2_5=	'>' 
    {
        newLeafNode(lv_name_2_5, grammarAccess.getBooleanExpAccess().getNameGreaterThanSignKeyword_0_1_1_0_4());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBooleanExpRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_2_5, null);
	    }

    |		lv_name_2_6=	'>=' 
    {
        newLeafNode(lv_name_2_6, grammarAccess.getBooleanExpAccess().getNameGreaterThanSignEqualsSignKeyword_0_1_1_0_5());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBooleanExpRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_2_6, null);
	    }

    |		lv_name_2_7=	'<' 
    {
        newLeafNode(lv_name_2_7, grammarAccess.getBooleanExpAccess().getNameLessThanSignKeyword_0_1_1_0_6());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBooleanExpRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_2_7, null);
	    }

    |		lv_name_2_8=	'<=' 
    {
        newLeafNode(lv_name_2_8, grammarAccess.getBooleanExpAccess().getNameLessThanSignEqualsSignKeyword_0_1_1_0_7());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBooleanExpRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_2_8, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBooleanExpAccess().getRightAttributeOrIntParserRuleCall_0_1_2_0()); 
	    }
		lv_right_3_0=ruleAttributeOrInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBooleanExpRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"AttributeOrInt");
	        afterParserOrEnumRuleCall();
	    }

)
)))
    |(	otherlv_4='(' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getBooleanExpAccess().getLeftParenthesisKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBooleanExpAccess().getNestedExpOrExpParserRuleCall_1_1_0()); 
	    }
		lv_nestedExp_5_0=ruleOrExp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBooleanExpRule());
	        }
       		set(
       			$current, 
       			"nestedExp",
        		lv_nestedExp_5_0, 
        		"OrExp");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getBooleanExpAccess().getRightParenthesisKeyword_1_2());
    }
))
;





// Entry rule entryRuleAttributeName
entryRuleAttributeName returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeNameRule()); }
	 iv_ruleAttributeName=ruleAttributeName 
	 { $current=$iv_ruleAttributeName.current; } 
	 EOF 
;

// Rule AttributeName
ruleAttributeName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getAttributeNameAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributeNameRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
    |((
(
		lv_parent_1_0=RULE_ID
		{
			newLeafNode(lv_parent_1_0, grammarAccess.getAttributeNameAccess().getParentIDTerminalRuleCall_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributeNameRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"parent",
        		lv_parent_1_0, 
        		"ID");
	    }

)
)	otherlv_2='.' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAttributeNameAccess().getFullStopKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeNameAccess().getChildAttributeNameParserRuleCall_1_2_0()); 
	    }
		lv_child_3_0=ruleAttributeName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeNameRule());
	        }
       		set(
       			$current, 
       			"child",
        		lv_child_3_0, 
        		"AttributeName");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleAttributeOrInt
entryRuleAttributeOrInt returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeOrIntRule()); }
	 iv_ruleAttributeOrInt=ruleAttributeOrInt 
	 { $current=$iv_ruleAttributeOrInt.current; } 
	 EOF 
;

// Rule AttributeOrInt
ruleAttributeOrInt returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeOrIntAccess().getAttributeAttributeNameParserRuleCall_0_0()); 
	    }
		lv_attribute_0_0=ruleAttributeName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeOrIntRule());
	        }
       		set(
       			$current, 
       			"attribute",
        		lv_attribute_0_0, 
        		"AttributeName");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		lv_value_1_0=RULE_INT
		{
			newLeafNode(lv_value_1_0, grammarAccess.getAttributeOrIntAccess().getValueINTTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributeOrIntRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"INT");
	    }

)
))
;





// Entry rule entryRuleGotoCondition
entryRuleGotoCondition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGotoConditionRule()); }
	 iv_ruleGotoCondition=ruleGotoCondition 
	 { $current=$iv_ruleGotoCondition.current; } 
	 EOF 
;

// Rule GotoCondition
ruleGotoCondition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='IF' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getGotoConditionAccess().getIFKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGotoConditionAccess().getConditionOrExpParserRuleCall_1_0()); 
	    }
		lv_condition_1_0=ruleOrExp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGotoConditionRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_1_0, 
        		"OrExp");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_2_0=	'GOTO' 
    {
        newLeafNode(lv_name_2_0, grammarAccess.getGotoConditionAccess().getNameGOTOKeyword_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGotoConditionRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_2_0, "GOTO");
	    }

)
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getGotoConditionRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getGotoConditionAccess().getGotoLabelCrossReference_3_0()); 
	}

)
))
;





// Entry rule entryRuleLabel
entryRuleLabel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLabelRule()); }
	 iv_ruleLabel=ruleLabel 
	 { $current=$iv_ruleLabel.current; } 
	 EOF 
;

// Rule Label
ruleLabel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='LABEL' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLabelAccess().getLABELKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getLabelAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLabelRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleAdditionExp
entryRuleAdditionExp returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAdditionExpRule()); }
	 iv_ruleAdditionExp=ruleAdditionExp 
	 { $current=$iv_ruleAdditionExp.current; } 
	 EOF 
;

// Rule AdditionExp
ruleAdditionExp returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAdditionExpAccess().getExpressionsMultiplicationExpParserRuleCall_0_0()); 
	    }
		lv_expressions_0_0=ruleMultiplicationExp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditionExpRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_0_0, 
        		"MultiplicationExp");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
(
		lv_operators_1_1=	'+' 
    {
        newLeafNode(lv_operators_1_1, grammarAccess.getAdditionExpAccess().getOperatorsPlusSignKeyword_1_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAdditionExpRule());
	        }
       		addWithLastConsumed($current, "operators", lv_operators_1_1, null);
	    }

    |		lv_operators_1_2=	'-' 
    {
        newLeafNode(lv_operators_1_2, grammarAccess.getAdditionExpAccess().getOperatorsHyphenMinusKeyword_1_0_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAdditionExpRule());
	        }
       		addWithLastConsumed($current, "operators", lv_operators_1_2, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAdditionExpAccess().getExpressionsMultiplicationExpParserRuleCall_1_1_0()); 
	    }
		lv_expressions_2_0=ruleMultiplicationExp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditionExpRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_2_0, 
        		"MultiplicationExp");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleMultiplicationExp
entryRuleMultiplicationExp returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultiplicationExpRule()); }
	 iv_ruleMultiplicationExp=ruleMultiplicationExp 
	 { $current=$iv_ruleMultiplicationExp.current; } 
	 EOF 
;

// Rule MultiplicationExp
ruleMultiplicationExp returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicationExpAccess().getExpressionsAttributeOrIntParserRuleCall_0_0_0()); 
	    }
		lv_expressions_0_0=ruleAttributeOrInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicationExpRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_0_0, 
        		"AttributeOrInt");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
(
		lv_operators_1_1=	'*' 
    {
        newLeafNode(lv_operators_1_1, grammarAccess.getMultiplicationExpAccess().getOperatorsAsteriskKeyword_0_1_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMultiplicationExpRule());
	        }
       		addWithLastConsumed($current, "operators", lv_operators_1_1, null);
	    }

    |		lv_operators_1_2=	'/' 
    {
        newLeafNode(lv_operators_1_2, grammarAccess.getMultiplicationExpAccess().getOperatorsSolidusKeyword_0_1_0_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMultiplicationExpRule());
	        }
       		addWithLastConsumed($current, "operators", lv_operators_1_2, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicationExpAccess().getExpressionsAttributeOrIntParserRuleCall_0_1_1_0()); 
	    }
		lv_expressions_2_0=ruleAttributeOrInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicationExpRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_2_0, 
        		"AttributeOrInt");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
    |(	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMultiplicationExpAccess().getLeftParenthesisKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicationExpAccess().getNestedExpAdditionExpParserRuleCall_1_1_0()); 
	    }
		lv_nestedExp_4_0=ruleAdditionExp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicationExpRule());
	        }
       		set(
       			$current, 
       			"nestedExp",
        		lv_nestedExp_4_0, 
        		"AdditionExp");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getMultiplicationExpAccess().getRightParenthesisKeyword_1_2());
    }
))
;





// Entry rule entryRuleValueAssignment
entryRuleValueAssignment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getValueAssignmentRule()); }
	 iv_ruleValueAssignment=ruleValueAssignment 
	 { $current=$iv_ruleValueAssignment.current; } 
	 EOF 
;

// Rule ValueAssignment
ruleValueAssignment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getValueAssignmentAccess().getNameAttributeNameParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleAttributeName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValueAssignmentRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"AttributeName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getValueAssignmentAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getValueAssignmentAccess().getAdditionAdditionExpParserRuleCall_2_0()); 
	    }
		lv_addition_2_0=ruleAdditionExp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValueAssignmentRule());
	        }
       		set(
       			$current, 
       			"addition",
        		lv_addition_2_0, 
        		"AdditionExp");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleSimpleAssignment
entryRuleSimpleAssignment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSimpleAssignmentRule()); }
	 iv_ruleSimpleAssignment=ruleSimpleAssignment 
	 { $current=$iv_ruleSimpleAssignment.current; } 
	 EOF 
;

// Rule SimpleAssignment
ruleSimpleAssignment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getSimpleAssignmentAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSimpleAssignmentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSimpleAssignmentAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleAssignmentAccess().getAttributeAttributeOrIntParserRuleCall_2_0()); 
	    }
		lv_attribute_2_0=ruleAttributeOrInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleAssignmentRule());
	        }
       		set(
       			$current, 
       			"attribute",
        		lv_attribute_2_0, 
        		"AttributeOrInt");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


